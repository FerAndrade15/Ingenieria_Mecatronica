
F1Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00001c9a  00001d4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c9a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080010e  0080010e  00001d5c  2**0
                  ALLOC
  3 .eeprom       00000010  00810000  00810000  00001d5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d9c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000f0  00000000  00000000  00001de0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001291  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000094c  00000000  00000000  00003161  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001502  00000000  00000000  00003aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000026c  00000000  00000000  00004fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007b7  00000000  00000000  0000521c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000098b  00000000  00000000  000059d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  0000635e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e9       	ldi	r30, 0x9A	; 154
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 30       	cpi	r26, 0x0E	; 14
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e0       	ldi	r26, 0x0E	; 14
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 32       	cpi	r26, 0x27	; 39
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
      9e:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
      a6:	cf 92       	push	r12
      a8:	0f 93       	push	r16
      aa:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
      ae:	81 30       	cpi	r24, 0x01	; 1
      b0:	19 f0       	breq	.+6      	; 0xb8 <adc_init+0x12>
      b2:	82 30       	cpi	r24, 0x02	; 2
      b4:	39 f0       	breq	.+14     	; 0xc4 <adc_init+0x1e>
      b6:	0b c0       	rjmp	.+22     	; 0xce <adc_init+0x28>
      b8:	ec e7       	ldi	r30, 0x7C	; 124
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	80 81       	ld	r24, Z
      be:	80 64       	ori	r24, 0x40	; 64
      c0:	80 83       	st	Z, r24
      c2:	05 c0       	rjmp	.+10     	; 0xce <adc_init+0x28>
      c4:	ec e7       	ldi	r30, 0x7C	; 124
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
      ca:	80 6c       	ori	r24, 0xC0	; 192
      cc:	80 83       	st	Z, r24
      ce:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
      d2:	61 30       	cpi	r22, 0x01	; 1
      d4:	11 f4       	brne	.+4      	; 0xda <adc_init+0x34>
      d6:	90 e2       	ldi	r25, 0x20	; 32
      d8:	01 c0       	rjmp	.+2      	; 0xdc <adc_init+0x36>
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	89 2b       	or	r24, r25
      de:	ec e7       	ldi	r30, 0x7C	; 124
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	80 83       	st	Z, r24
      e4:	80 81       	ld	r24, Z
      e6:	48 30       	cpi	r20, 0x08	; 8
      e8:	08 f0       	brcs	.+2      	; 0xec <adc_init+0x46>
      ea:	40 e0       	ldi	r20, 0x00	; 0
      ec:	48 2b       	or	r20, r24
      ee:	40 93 7c 00 	sts	0x007C, r20	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
      f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      f6:	21 30       	cpi	r18, 0x01	; 1
      f8:	11 f4       	brne	.+4      	; 0xfe <adc_init+0x58>
      fa:	90 e8       	ldi	r25, 0x80	; 128
      fc:	01 c0       	rjmp	.+2      	; 0x100 <adc_init+0x5a>
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	89 2b       	or	r24, r25
     102:	ea e7       	ldi	r30, 0x7A	; 122
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	80 83       	st	Z, r24
     108:	80 81       	ld	r24, Z
     10a:	01 30       	cpi	r16, 0x01	; 1
     10c:	11 f4       	brne	.+4      	; 0x112 <adc_init+0x6c>
     10e:	90 e2       	ldi	r25, 0x20	; 32
     110:	01 c0       	rjmp	.+2      	; 0x114 <adc_init+0x6e>
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	89 2b       	or	r24, r25
     116:	ea e7       	ldi	r30, 0x7A	; 122
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	80 83       	st	Z, r24
     11c:	80 81       	ld	r24, Z
     11e:	88 60       	ori	r24, 0x08	; 8
     120:	80 83       	st	Z, r24
     122:	80 81       	ld	r24, Z
     124:	97 e0       	ldi	r25, 0x07	; 7
     126:	9c 15       	cp	r25, r12
     128:	08 f4       	brcc	.+2      	; 0x12c <adc_init+0x86>
     12a:	c1 2c       	mov	r12, r1
     12c:	c8 2a       	or	r12, r24
     12e:	c0 92 7a 00 	sts	0x007A, r12	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     132:	0f 91       	pop	r16
     134:	cf 90       	pop	r12
     136:	08 95       	ret

00000138 <changechannel>:
     138:	ec e7       	ldi	r30, 0x7C	; 124
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	90 81       	ld	r25, Z
     13e:	90 7f       	andi	r25, 0xF0	; 240
     140:	90 83       	st	Z, r25
     142:	90 81       	ld	r25, Z
     144:	88 30       	cpi	r24, 0x08	; 8
     146:	08 f0       	brcs	.+2      	; 0x14a <changechannel+0x12>
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	89 2b       	or	r24, r25
     14c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     150:	08 95       	ret

00000152 <portsettings>:
		}
	}
}

void portsettings(void){
	DDRC = (1<<DDD1)|(1<<DDD2)|(1<<DDD3);										//Leds outputs	
     152:	8e e0       	ldi	r24, 0x0E	; 14
     154:	87 b9       	out	0x07, r24	; 7
	DDRD = 0;																	//All PortD as input
     156:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1<<DDD3)|(1<<DDD4);												//Buttons pull-up
     158:	8b b1       	in	r24, 0x0b	; 11
     15a:	88 61       	ori	r24, 0x18	; 24
     15c:	8b b9       	out	0x0b, r24	; 11
     15e:	08 95       	ret

00000160 <pcint_init>:
	//PORTD |= (1<<DDD3)|(1<<DDD5);												//Buttons pull-up
}
void pcint_init(void){
	PCICR = (1<<PCIE2);															//Enable Pin Change Interrupt for PORTD
     160:	84 e0       	ldi	r24, 0x04	; 4
     162:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK2 = (1<<PCINT23)|(1<<PCINT20)|(1<<PCINT19);							//Enable Pin Change on PD3, PD4 & PD7	
     166:	88 e9       	ldi	r24, 0x98	; 152
     168:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
     16c:	08 95       	ret

0000016e <anti_debounce>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     16e:	8f e3       	ldi	r24, 0x3F	; 63
     170:	9c e9       	ldi	r25, 0x9C	; 156
     172:	01 97       	sbiw	r24, 0x01	; 1
     174:	f1 f7       	brne	.-4      	; 0x172 <anti_debounce+0x4>
     176:	00 c0       	rjmp	.+0      	; 0x178 <anti_debounce+0xa>
     178:	00 00       	nop
//	PCMSK2 = (1<<PCINT23)|(1<<PCINT22)|(1<<PCINT21)|(1<<PCINT20)|(1<<PCINT19);	//Enable Pin Change on PD3, PD4, PD5, PD6 & PD7
}
void anti_debounce(void){
	_delay_ms(10);								//Estimated debounce duration
	switch(reenable_pinchange){
     17a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <reenable_pinchange>
     17e:	83 30       	cpi	r24, 0x03	; 3
     180:	19 f0       	breq	.+6      	; 0x188 <anti_debounce+0x1a>
     182:	84 30       	cpi	r24, 0x04	; 4
     184:	49 f0       	breq	.+18     	; 0x198 <anti_debounce+0x2a>
     186:	08 95       	ret
		case modebtn:
			if((PIND&0x08)==0x08){
     188:	4b 9b       	sbis	0x09, 3	; 9
     18a:	0d c0       	rjmp	.+26     	; 0x1a6 <anti_debounce+0x38>
				PCMSK2 = (1<<PCINT23)|(1<<PCINT20)|(1<<PCINT19);
     18c:	88 e9       	ldi	r24, 0x98	; 152
     18e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
				reenable_pinchange = 0;
     192:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <reenable_pinchange>
     196:	08 95       	ret
			}
			break;
		case select_routine:
			if((PIND&0x10)==0x10){
     198:	4c 9b       	sbis	0x09, 4	; 9
     19a:	05 c0       	rjmp	.+10     	; 0x1a6 <anti_debounce+0x38>
				PCMSK2 = (1<<PCINT23)|(1<<PCINT20)|(1<<PCINT19);
     19c:	88 e9       	ldi	r24, 0x98	; 152
     19e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
				reenable_pinchange = 0;
     1a2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <reenable_pinchange>
     1a6:	08 95       	ret

000001a8 <main>:
uint8_t reproduceservos[4];
uint8_t selectedroutine = startposition;
uint8_t starteeprom = 0;

int main(){
	cli();
     1a8:	f8 94       	cli
	portsettings();
     1aa:	0e 94 a9 00 	call	0x152	; 0x152 <portsettings>
	pcint_init();
     1ae:	0e 94 b0 00 	call	0x160	; 0x160 <pcint_init>
	initUART09600();
     1b2:	0e 94 ae 0b 	call	0x175c	; 0x175c <initUART09600>
	initPWM(OC0A, inverted, fastmode, until_top, prescaler1024, disable, 50);
     1b6:	0f 2e       	mov	r0, r31
     1b8:	a1 2c       	mov	r10, r1
     1ba:	b1 2c       	mov	r11, r1
     1bc:	f8 e4       	ldi	r31, 0x48	; 72
     1be:	cf 2e       	mov	r12, r31
     1c0:	f2 e4       	ldi	r31, 0x42	; 66
     1c2:	df 2e       	mov	r13, r31
     1c4:	f0 2d       	mov	r31, r0
     1c6:	e1 2c       	mov	r14, r1
     1c8:	05 e0       	ldi	r16, 0x05	; 5
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	42 e0       	ldi	r20, 0x02	; 2
     1d0:	61 e0       	ldi	r22, 0x01	; 1
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	0e 94 43 04 	call	0x886	; 0x886 <initPWM>
	initPWM(OC0B, inverted, fastmode, until_top, prescaler1024, disable, 0);
     1d8:	a1 2c       	mov	r10, r1
     1da:	b1 2c       	mov	r11, r1
     1dc:	65 01       	movw	r12, r10
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	42 e0       	ldi	r20, 0x02	; 2
     1e4:	61 e0       	ldi	r22, 0x01	; 1
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	0e 94 43 04 	call	0x886	; 0x886 <initPWM>
	initPWM(OC1A, noninverted, fasticrmode, period20ms,prescaler8, disable, positionm90dutycycle);
     1ec:	a1 2c       	mov	r10, r1
     1ee:	b1 2c       	mov	r11, r1
     1f0:	65 01       	movw	r12, r10
     1f2:	68 94       	set
     1f4:	c5 f8       	bld	r12, 5
     1f6:	d6 f8       	bld	r13, 6
     1f8:	02 e0       	ldi	r16, 0x02	; 2
     1fa:	20 e4       	ldi	r18, 0x40	; 64
     1fc:	3c e9       	ldi	r19, 0x9C	; 156
     1fe:	45 e0       	ldi	r20, 0x05	; 5
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	83 e0       	ldi	r24, 0x03	; 3
     204:	0e 94 43 04 	call	0x886	; 0x886 <initPWM>
	initPWM(OC1B, noninverted, fasticrmode, period20ms,prescaler8, disable, positionm90dutycycle);
     208:	20 e4       	ldi	r18, 0x40	; 64
     20a:	3c e9       	ldi	r19, 0x9C	; 156
     20c:	45 e0       	ldi	r20, 0x05	; 5
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	84 e0       	ldi	r24, 0x04	; 4
     212:	0e 94 43 04 	call	0x886	; 0x886 <initPWM>
	adc_init(avcc, left, adc_channel, enable, disable, disable, adcprescaler128);
     216:	0f 2e       	mov	r0, r31
     218:	f7 e0       	ldi	r31, 0x07	; 7
     21a:	cf 2e       	mov	r12, r31
     21c:	f0 2d       	mov	r31, r0
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <adc_channel>
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	ADCSRA |= (1<<ADSC);
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 64       	ori	r24, 0x40	; 64
     236:	80 83       	st	Z, r24
	sei();
     238:	78 94       	sei
	while(1){
		switch(operating_mode){
     23a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <operating_mode>
     23e:	82 30       	cpi	r24, 0x02	; 2
     240:	01 f1       	breq	.+64     	; 0x282 <main+0xda>
     242:	83 30       	cpi	r24, 0x03	; 3
     244:	09 f4       	brne	.+2      	; 0x248 <main+0xa0>
     246:	d5 c0       	rjmp	.+426    	; 0x3f2 <main+0x24a>
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	b9 f7       	brne	.-18     	; 0x23a <main+0x92>
			case manual:	
				if(reenable_pinchange!=0){
     24c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <reenable_pinchange>
     250:	88 23       	and	r24, r24
     252:	19 f0       	breq	.+6      	; 0x25a <main+0xb2>
					anti_debounce();
     254:	0e 94 b7 00 	call	0x16e	; 0x16e <anti_debounce>
     258:	0d c0       	rjmp	.+26     	; 0x274 <main+0xcc>
				}
				else if(reading_state==0){
     25a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <reading_state>
     25e:	81 11       	cpse	r24, r1
     260:	09 c0       	rjmp	.+18     	; 0x274 <main+0xcc>
					reading_state = 1;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <reading_state>
					ADCSRA |= (1<<ADSC);
     268:	ea e7       	ldi	r30, 0x7A	; 122
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	80 64       	ori	r24, 0x40	; 64
     270:	80 83       	st	Z, r24
					sei();
     272:	78 94       	sei
				}
				PORTC |= (1<<DDD1);
     274:	88 b1       	in	r24, 0x08	; 8
     276:	82 60       	ori	r24, 0x02	; 2
     278:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~((1<<DDD2)|(1<<DDD3));
     27a:	88 b1       	in	r24, 0x08	; 8
     27c:	83 7f       	andi	r24, 0xF3	; 243
     27e:	88 b9       	out	0x08, r24	; 8
				break;
     280:	dc cf       	rjmp	.-72     	; 0x23a <main+0x92>
			case eeprom:
				PORTC |= (1<<DDD2);
     282:	88 b1       	in	r24, 0x08	; 8
     284:	84 60       	ori	r24, 0x04	; 4
     286:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~((1<<DDD1)|(1<<DDD3));
     288:	88 b1       	in	r24, 0x08	; 8
     28a:	85 7f       	andi	r24, 0xF5	; 245
     28c:	88 b9       	out	0x08, r24	; 8
				if(reenable_pinchange==modebtn){
     28e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <reenable_pinchange>
     292:	83 30       	cpi	r24, 0x03	; 3
     294:	91 f6       	brne	.-92     	; 0x23a <main+0x92>
					anti_debounce();
     296:	0e 94 b7 00 	call	0x16e	; 0x16e <anti_debounce>
					if(starteeprom==startposition){
     29a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     29e:	81 30       	cpi	r24, 0x01	; 1
     2a0:	61 f6       	brne	.-104    	; 0x23a <main+0x92>
						cli();
     2a2:	f8 94       	cli
						starteeprom = 0;
     2a4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
						switch(selectedroutine){
     2a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2ac:	82 30       	cpi	r24, 0x02	; 2
     2ae:	91 f0       	breq	.+36     	; 0x2d4 <main+0x12c>
     2b0:	18 f4       	brcc	.+6      	; 0x2b8 <main+0x110>
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	31 f0       	breq	.+12     	; 0x2c2 <main+0x11a>
     2b6:	28 c0       	rjmp	.+80     	; 0x308 <main+0x160>
     2b8:	83 30       	cpi	r24, 0x03	; 3
     2ba:	a9 f0       	breq	.+42     	; 0x2e6 <main+0x13e>
     2bc:	84 30       	cpi	r24, 0x04	; 4
     2be:	e1 f0       	breq	.+56     	; 0x2f8 <main+0x150>
     2c0:	23 c0       	rjmp	.+70     	; 0x308 <main+0x160>
							case startposition:
								eeprom_read_block(reproduceservos, &_start, 4);
     2c2:	44 e0       	ldi	r20, 0x04	; 4
     2c4:	50 e0       	ldi	r21, 0x00	; 0
     2c6:	6c e0       	ldi	r22, 0x0C	; 12
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	82 e2       	ldi	r24, 0x22	; 34
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <eeprom_read_block>
								break;
     2d2:	1a c0       	rjmp	.+52     	; 0x308 <main+0x160>
							case finalposition:
								eeprom_read_block(reproduceservos, &_final, 4);
     2d4:	44 e0       	ldi	r20, 0x04	; 4
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	68 e0       	ldi	r22, 0x08	; 8
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	82 e2       	ldi	r24, 0x22	; 34
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <eeprom_read_block>
								break;
     2e4:	11 c0       	rjmp	.+34     	; 0x308 <main+0x160>
							case leftmiddle:
								eeprom_read_block(reproduceservos, &_leftmiddle, 4);
     2e6:	44 e0       	ldi	r20, 0x04	; 4
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	64 e0       	ldi	r22, 0x04	; 4
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	82 e2       	ldi	r24, 0x22	; 34
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <eeprom_read_block>
								break;
     2f6:	08 c0       	rjmp	.+16     	; 0x308 <main+0x160>
							case rightfast:
								eeprom_read_block(reproduceservos, &_rightfast, 4);
     2f8:	44 e0       	ldi	r20, 0x04	; 4
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	82 e2       	ldi	r24, 0x22	; 34
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <eeprom_read_block>
								break;
						}
						potentiometer_value = (reproduceservos[0]*servodivision)+positionm90dutycycle;
     308:	02 e2       	ldi	r16, 0x22	; 34
     30a:	11 e0       	ldi	r17, 0x01	; 1
     30c:	f8 01       	movw	r30, r16
     30e:	60 81       	ld	r22, Z
     310:	70 e0       	ldi	r23, 0x00	; 0
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e2       	ldi	r19, 0x20	; 32
     31e:	45 e2       	ldi	r20, 0x25	; 37
     320:	5d e3       	ldi	r21, 0x3D	; 61
     322:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	40 e2       	ldi	r20, 0x20	; 32
     32c:	50 e4       	ldi	r21, 0x40	; 64
     32e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__addsf3>
     332:	ab 01       	movw	r20, r22
     334:	bc 01       	movw	r22, r24
     336:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <potentiometer_value>
     33a:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <potentiometer_value+0x1>
     33e:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <potentiometer_value+0x2>
     342:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <potentiometer_value+0x3>
						updatedutycycle(OC1A, potentiometer_value);
     346:	83 e0       	ldi	r24, 0x03	; 3
     348:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <updatedutycycle>
						potentiometer_value = 0xFF - reproduceservos[1];
     34c:	f8 01       	movw	r30, r16
     34e:	81 81       	ldd	r24, Z+1	; 0x01
     350:	cf ef       	ldi	r28, 0xFF	; 255
     352:	d0 e0       	ldi	r29, 0x00	; 0
     354:	be 01       	movw	r22, r28
     356:	68 1b       	sub	r22, r24
     358:	71 09       	sbc	r23, r1
     35a:	07 2e       	mov	r0, r23
     35c:	00 0c       	add	r0, r0
     35e:	88 0b       	sbc	r24, r24
     360:	99 0b       	sbc	r25, r25
     362:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
     366:	ab 01       	movw	r20, r22
     368:	bc 01       	movw	r22, r24
     36a:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <potentiometer_value>
     36e:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <potentiometer_value+0x1>
     372:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <potentiometer_value+0x2>
     376:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <potentiometer_value+0x3>
						updatedutycycle(OC0A, potentiometer_value);
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <updatedutycycle>
						potentiometer_value = 0xFF - reproduceservos[2];
     380:	f8 01       	movw	r30, r16
     382:	82 81       	ldd	r24, Z+2	; 0x02
     384:	be 01       	movw	r22, r28
     386:	68 1b       	sub	r22, r24
     388:	71 09       	sbc	r23, r1
     38a:	07 2e       	mov	r0, r23
     38c:	00 0c       	add	r0, r0
     38e:	88 0b       	sbc	r24, r24
     390:	99 0b       	sbc	r25, r25
     392:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
     396:	ab 01       	movw	r20, r22
     398:	bc 01       	movw	r22, r24
     39a:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <potentiometer_value>
     39e:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <potentiometer_value+0x1>
     3a2:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <potentiometer_value+0x2>
     3a6:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <potentiometer_value+0x3>
						updatedutycycle(OC0B, potentiometer_value);
     3aa:	82 e0       	ldi	r24, 0x02	; 2
     3ac:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <updatedutycycle>
						potentiometer_value = (reproduceservos[3]*servodivision)+positionm90dutycycle;
     3b0:	f8 01       	movw	r30, r16
     3b2:	63 81       	ldd	r22, Z+3	; 0x03
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
     3be:	21 e0       	ldi	r18, 0x01	; 1
     3c0:	30 e2       	ldi	r19, 0x20	; 32
     3c2:	45 e2       	ldi	r20, 0x25	; 37
     3c4:	5d e3       	ldi	r21, 0x3D	; 61
     3c6:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	40 e2       	ldi	r20, 0x20	; 32
     3d0:	50 e4       	ldi	r21, 0x40	; 64
     3d2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__addsf3>
     3d6:	ab 01       	movw	r20, r22
     3d8:	bc 01       	movw	r22, r24
     3da:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <potentiometer_value>
     3de:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <potentiometer_value+0x1>
     3e2:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <potentiometer_value+0x2>
     3e6:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <potentiometer_value+0x3>
						updatedutycycle(OC1B, potentiometer_value);
     3ea:	84 e0       	ldi	r24, 0x04	; 4
     3ec:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <updatedutycycle>
     3f0:	24 cf       	rjmp	.-440    	; 0x23a <main+0x92>
					}
				}
				break;
			case uart:
				if(reenable_pinchange==modebtn){
     3f2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <reenable_pinchange>
     3f6:	83 30       	cpi	r24, 0x03	; 3
     3f8:	11 f4       	brne	.+4      	; 0x3fe <main+0x256>
					anti_debounce();
     3fa:	0e 94 b7 00 	call	0x16e	; 0x16e <anti_debounce>
				}
				PORTC |= (1<<DDD3);
     3fe:	88 b1       	in	r24, 0x08	; 8
     400:	88 60       	ori	r24, 0x08	; 8
     402:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~((1<<DDD1)|(1<<DDD2));
     404:	88 b1       	in	r24, 0x08	; 8
     406:	89 7f       	andi	r24, 0xF9	; 249
     408:	88 b9       	out	0x08, r24	; 8
				break;
     40a:	17 cf       	rjmp	.-466    	; 0x23a <main+0x92>

0000040c <__vector_21>:
			break;
	}
	
}
//ADC INTERRUPT	 -----------------------------------------------------//
ISR(ADC_vect){
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	2f 93       	push	r18
     418:	3f 93       	push	r19
     41a:	4f 93       	push	r20
     41c:	5f 93       	push	r21
     41e:	6f 93       	push	r22
     420:	7f 93       	push	r23
     422:	8f 93       	push	r24
     424:	9f 93       	push	r25
     426:	af 93       	push	r26
     428:	bf 93       	push	r27
     42a:	ef 93       	push	r30
     42c:	ff 93       	push	r31
	cli();
     42e:	f8 94       	cli
	switch(adc_channel){
     430:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_channel>
     434:	85 30       	cpi	r24, 0x05	; 5
     436:	61 f1       	breq	.+88     	; 0x490 <__vector_21+0x84>
     438:	18 f4       	brcc	.+6      	; 0x440 <__vector_21+0x34>
     43a:	84 30       	cpi	r24, 0x04	; 4
     43c:	41 f0       	breq	.+16     	; 0x44e <__vector_21+0x42>
     43e:	7c c0       	rjmp	.+248    	; 0x538 <__vector_21+0x12c>
     440:	86 30       	cpi	r24, 0x06	; 6
     442:	09 f4       	brne	.+2      	; 0x446 <__vector_21+0x3a>
     444:	3f c0       	rjmp	.+126    	; 0x4c4 <__vector_21+0xb8>
     446:	87 30       	cpi	r24, 0x07	; 7
     448:	09 f4       	brne	.+2      	; 0x44c <__vector_21+0x40>
     44a:	56 c0       	rjmp	.+172    	; 0x4f8 <__vector_21+0xec>
     44c:	75 c0       	rjmp	.+234    	; 0x538 <__vector_21+0x12c>
		case ADC4:												//pot_direction
			potentiometer_value = (ADCH*servodivision)+positionm90dutycycle;
     44e:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
     45c:	21 e0       	ldi	r18, 0x01	; 1
     45e:	30 e2       	ldi	r19, 0x20	; 32
     460:	45 e2       	ldi	r20, 0x25	; 37
     462:	5d e3       	ldi	r21, 0x3D	; 61
     464:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	40 e2       	ldi	r20, 0x20	; 32
     46e:	50 e4       	ldi	r21, 0x40	; 64
     470:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__addsf3>
     474:	ab 01       	movw	r20, r22
     476:	bc 01       	movw	r22, r24
     478:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <potentiometer_value>
     47c:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <potentiometer_value+0x1>
     480:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <potentiometer_value+0x2>
     484:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <potentiometer_value+0x3>
			updatedutycycle(OC1A, potentiometer_value);
     488:	83 e0       	ldi	r24, 0x03	; 3
     48a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <updatedutycycle>
			break;
     48e:	54 c0       	rjmp	.+168    	; 0x538 <__vector_21+0x12c>
		case ADC5:												//pot_speed
			potentiometer_value = 0xFF - ADCH;
     490:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     494:	6f ef       	ldi	r22, 0xFF	; 255
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	68 1b       	sub	r22, r24
     49a:	71 09       	sbc	r23, r1
     49c:	07 2e       	mov	r0, r23
     49e:	00 0c       	add	r0, r0
     4a0:	88 0b       	sbc	r24, r24
     4a2:	99 0b       	sbc	r25, r25
     4a4:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
     4a8:	ab 01       	movw	r20, r22
     4aa:	bc 01       	movw	r22, r24
     4ac:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <potentiometer_value>
     4b0:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <potentiometer_value+0x1>
     4b4:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <potentiometer_value+0x2>
     4b8:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <potentiometer_value+0x3>
			updatedutycycle(OC0A, potentiometer_value);
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <updatedutycycle>
			break;
     4c2:	3a c0       	rjmp	.+116    	; 0x538 <__vector_21+0x12c>
		case ADC6:												//pot_light
			potentiometer_value = 0xFF - ADCH;
     4c4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     4c8:	6f ef       	ldi	r22, 0xFF	; 255
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	68 1b       	sub	r22, r24
     4ce:	71 09       	sbc	r23, r1
     4d0:	07 2e       	mov	r0, r23
     4d2:	00 0c       	add	r0, r0
     4d4:	88 0b       	sbc	r24, r24
     4d6:	99 0b       	sbc	r25, r25
     4d8:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
     4dc:	ab 01       	movw	r20, r22
     4de:	bc 01       	movw	r22, r24
     4e0:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <potentiometer_value>
     4e4:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <potentiometer_value+0x1>
     4e8:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <potentiometer_value+0x2>
     4ec:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <potentiometer_value+0x3>
			updatedutycycle(OC0B, potentiometer_value);
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <updatedutycycle>
			break;
     4f6:	20 c0       	rjmp	.+64     	; 0x538 <__vector_21+0x12c>
		case ADC7:												//pot_cabin
			potentiometer_value = (ADCH*servodivision)+positionm90dutycycle;
     4f8:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
     506:	21 e0       	ldi	r18, 0x01	; 1
     508:	30 e2       	ldi	r19, 0x20	; 32
     50a:	45 e2       	ldi	r20, 0x25	; 37
     50c:	5d e3       	ldi	r21, 0x3D	; 61
     50e:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	40 e2       	ldi	r20, 0x20	; 32
     518:	50 e4       	ldi	r21, 0x40	; 64
     51a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__addsf3>
     51e:	ab 01       	movw	r20, r22
     520:	bc 01       	movw	r22, r24
     522:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <potentiometer_value>
     526:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <potentiometer_value+0x1>
     52a:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <potentiometer_value+0x2>
     52e:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <potentiometer_value+0x3>
			updatedutycycle(OC1B, potentiometer_value);
     532:	84 e0       	ldi	r24, 0x04	; 4
     534:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <updatedutycycle>
			break;
		default:
			break;
	}
	adc_channel = (adc_channel==ADC7)?ADC4:(adc_channel+1);	
     538:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_channel>
     53c:	87 30       	cpi	r24, 0x07	; 7
     53e:	11 f0       	breq	.+4      	; 0x544 <__vector_21+0x138>
     540:	8f 5f       	subi	r24, 0xFF	; 255
     542:	01 c0       	rjmp	.+2      	; 0x546 <__vector_21+0x13a>
     544:	84 e0       	ldi	r24, 0x04	; 4
     546:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_channel>
	changechannel(adc_channel);
     54a:	0e 94 9c 00 	call	0x138	; 0x138 <changechannel>
	reading_state = 0;																					//Lecture of the two ADC registers
     54e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <reading_state>
}
     552:	ff 91       	pop	r31
     554:	ef 91       	pop	r30
     556:	bf 91       	pop	r27
     558:	af 91       	pop	r26
     55a:	9f 91       	pop	r25
     55c:	8f 91       	pop	r24
     55e:	7f 91       	pop	r23
     560:	6f 91       	pop	r22
     562:	5f 91       	pop	r21
     564:	4f 91       	pop	r20
     566:	3f 91       	pop	r19
     568:	2f 91       	pop	r18
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <__vector_18>:
//USART INTERRUPT	 ---------------------------------------------------//
ISR(USART_RX_vect){
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	2f 93       	push	r18
     580:	3f 93       	push	r19
     582:	4f 93       	push	r20
     584:	5f 93       	push	r21
     586:	6f 93       	push	r22
     588:	7f 93       	push	r23
     58a:	8f 93       	push	r24
     58c:	9f 93       	push	r25
     58e:	af 93       	push	r26
     590:	bf 93       	push	r27
     592:	ef 93       	push	r30
     594:	ff 93       	push	r31
	bufferRX = UDR0;																//Reading everything send to the chip
     596:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     59a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <bufferRX>
	while(!(UCSR0A&(1<<UDRE0)));
     59e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     5a2:	85 ff       	sbrs	r24, 5
     5a4:	fc cf       	rjmp	.-8      	; 0x59e <__vector_18+0x2a>
	if((countuartaddresssaved<2)&&(uart_control==startuartsel)){
     5a6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <countuartaddresssaved>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	78 f4       	brcc	.+30     	; 0x5cc <__vector_18+0x58>
     5ae:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <uart_control>
     5b2:	91 11       	cpse	r25, r1
     5b4:	0b c0       	rjmp	.+22     	; 0x5cc <__vector_18+0x58>
		uartaddress[countuartaddresssaved]=bufferRX;
     5b6:	e8 2f       	mov	r30, r24
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <bufferRX>
     5be:	e0 5e       	subi	r30, 0xE0	; 224
     5c0:	fe 4f       	sbci	r31, 0xFE	; 254
     5c2:	90 83       	st	Z, r25
		countuartaddresssaved++;
     5c4:	8f 5f       	subi	r24, 0xFF	; 255
     5c6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <countuartaddresssaved>
     5ca:	10 c0       	rjmp	.+32     	; 0x5ec <__vector_18+0x78>
	}else if((countuartaddresssaved<4)&&(uart_control!=startuartsel)){
     5cc:	84 30       	cpi	r24, 0x04	; 4
     5ce:	70 f4       	brcc	.+28     	; 0x5ec <__vector_18+0x78>
     5d0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <uart_control>
     5d4:	99 23       	and	r25, r25
     5d6:	51 f0       	breq	.+20     	; 0x5ec <__vector_18+0x78>
		receiveuart[countuartaddresssaved]=bufferRX;
     5d8:	e8 2f       	mov	r30, r24
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <bufferRX>
     5e0:	e8 5e       	subi	r30, 0xE8	; 232
     5e2:	fe 4f       	sbci	r31, 0xFE	; 254
     5e4:	90 83       	st	Z, r25
		countuartaddresssaved++;
     5e6:	8f 5f       	subi	r24, 0xFF	; 255
     5e8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <countuartaddresssaved>
	}
	if((countuartaddresssaved==2)&&(uart_control==startuartsel)){
     5ec:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <countuartaddresssaved>
     5f0:	82 30       	cpi	r24, 0x02	; 2
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <__vector_18+0x82>
     5f4:	4a c0       	rjmp	.+148    	; 0x68a <__vector_18+0x116>
     5f6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <uart_control>
     5fa:	91 11       	cpse	r25, r1
     5fc:	46 c0       	rjmp	.+140    	; 0x68a <__vector_18+0x116>
		if(uartaddress[0]==0x31){
     5fe:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <uartaddress>
     602:	21 33       	cpi	r18, 0x31	; 49
     604:	89 f4       	brne	.+34     	; 0x628 <__vector_18+0xb4>
			operating_mode = (uartaddress[1]==0x30)?manual:((uartaddress[1]==0x31)?eeprom:((uartaddress[1]==0x32)?uart:operating_mode));
     606:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <uartaddress+0x1>
     60a:	90 33       	cpi	r25, 0x30	; 48
     60c:	39 f0       	breq	.+14     	; 0x61c <__vector_18+0xa8>
     60e:	91 33       	cpi	r25, 0x31	; 49
     610:	41 f0       	breq	.+16     	; 0x622 <__vector_18+0xae>
     612:	92 33       	cpi	r25, 0x32	; 50
     614:	29 f0       	breq	.+10     	; 0x620 <__vector_18+0xac>
     616:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <operating_mode>
     61a:	03 c0       	rjmp	.+6      	; 0x622 <__vector_18+0xae>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	01 c0       	rjmp	.+2      	; 0x622 <__vector_18+0xae>
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <operating_mode>
     626:	2f c0       	rjmp	.+94     	; 0x686 <__vector_18+0x112>
		}else if((operating_mode==uart)){
     628:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <operating_mode>
     62c:	33 30       	cpi	r19, 0x03	; 3
     62e:	59 f5       	brne	.+86     	; 0x686 <__vector_18+0x112>
			if(uartaddress[0]==0x32){
     630:	22 33       	cpi	r18, 0x32	; 50
     632:	a1 f4       	brne	.+40     	; 0x65c <__vector_18+0xe8>
				uart_control = (uartaddress[1]==0x30)?changeservo1:((uartaddress[1]==0x31)?changeservo2:((uartaddress[1]==0x32)?changeservo3:((uartaddress[1]==0x33)?changeservo4:uart_control)));
     634:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <uartaddress+0x1>
     638:	20 33       	cpi	r18, 0x30	; 48
     63a:	41 f0       	breq	.+16     	; 0x64c <__vector_18+0xd8>
     63c:	21 33       	cpi	r18, 0x31	; 49
     63e:	41 f0       	breq	.+16     	; 0x650 <__vector_18+0xdc>
     640:	22 33       	cpi	r18, 0x32	; 50
     642:	41 f0       	breq	.+16     	; 0x654 <__vector_18+0xe0>
     644:	23 33       	cpi	r18, 0x33	; 51
     646:	39 f4       	brne	.+14     	; 0x656 <__vector_18+0xe2>
     648:	94 e0       	ldi	r25, 0x04	; 4
     64a:	05 c0       	rjmp	.+10     	; 0x656 <__vector_18+0xe2>
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	03 c0       	rjmp	.+6      	; 0x656 <__vector_18+0xe2>
     650:	98 2f       	mov	r25, r24
     652:	01 c0       	rjmp	.+2      	; 0x656 <__vector_18+0xe2>
     654:	93 2f       	mov	r25, r19
     656:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <uart_control>
     65a:	15 c0       	rjmp	.+42     	; 0x686 <__vector_18+0x112>
			}else if(uartaddress[0]==0x33){
     65c:	23 33       	cpi	r18, 0x33	; 51
     65e:	99 f4       	brne	.+38     	; 0x686 <__vector_18+0x112>
				uart_control = (uartaddress[1]==0x30)?changeswitch1:((uartaddress[1]==0x31)?changeswitch2:((uartaddress[1]==0x32)?changeswitch3:((uartaddress[1]==0x33)?changeswitch4:uart_control)));
     660:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <uartaddress+0x1>
     664:	80 33       	cpi	r24, 0x30	; 48
     666:	41 f0       	breq	.+16     	; 0x678 <__vector_18+0x104>
     668:	81 33       	cpi	r24, 0x31	; 49
     66a:	41 f0       	breq	.+16     	; 0x67c <__vector_18+0x108>
     66c:	82 33       	cpi	r24, 0x32	; 50
     66e:	41 f0       	breq	.+16     	; 0x680 <__vector_18+0x10c>
     670:	83 33       	cpi	r24, 0x33	; 51
     672:	39 f4       	brne	.+14     	; 0x682 <__vector_18+0x10e>
     674:	98 e0       	ldi	r25, 0x08	; 8
     676:	05 c0       	rjmp	.+10     	; 0x682 <__vector_18+0x10e>
     678:	95 e0       	ldi	r25, 0x05	; 5
     67a:	03 c0       	rjmp	.+6      	; 0x682 <__vector_18+0x10e>
     67c:	96 e0       	ldi	r25, 0x06	; 6
     67e:	01 c0       	rjmp	.+2      	; 0x682 <__vector_18+0x10e>
     680:	97 e0       	ldi	r25, 0x07	; 7
     682:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <uart_control>
			}
		}
		countuartaddresssaved=0;																					//Restart count to save values
     686:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <countuartaddresssaved>
	}
	if((countuartaddresssaved==3)&&(uart_control!=startuartsel)&&(uart_control<5)){
     68a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <countuartaddresssaved>
     68e:	83 30       	cpi	r24, 0x03	; 3
     690:	09 f0       	breq	.+2      	; 0x694 <__vector_18+0x120>
     692:	90 c0       	rjmp	.+288    	; 0x7b4 <__vector_18+0x240>
     694:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <uart_control>
     698:	88 23       	and	r24, r24
     69a:	09 f4       	brne	.+2      	; 0x69e <__vector_18+0x12a>
     69c:	8b c0       	rjmp	.+278    	; 0x7b4 <__vector_18+0x240>
     69e:	85 30       	cpi	r24, 0x05	; 5
     6a0:	08 f0       	brcs	.+2      	; 0x6a4 <__vector_18+0x130>
     6a2:	88 c0       	rjmp	.+272    	; 0x7b4 <__vector_18+0x240>
		switch(uart_control){
     6a4:	82 30       	cpi	r24, 0x02	; 2
     6a6:	79 f1       	breq	.+94     	; 0x706 <__vector_18+0x192>
     6a8:	18 f4       	brcc	.+6      	; 0x6b0 <__vector_18+0x13c>
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	41 f0       	breq	.+16     	; 0x6be <__vector_18+0x14a>
     6ae:	7e c0       	rjmp	.+252    	; 0x7ac <__vector_18+0x238>
     6b0:	83 30       	cpi	r24, 0x03	; 3
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <__vector_18+0x142>
     6b4:	40 c0       	rjmp	.+128    	; 0x736 <__vector_18+0x1c2>
     6b6:	84 30       	cpi	r24, 0x04	; 4
     6b8:	09 f4       	brne	.+2      	; 0x6bc <__vector_18+0x148>
     6ba:	55 c0       	rjmp	.+170    	; 0x766 <__vector_18+0x1f2>
     6bc:	77 c0       	rjmp	.+238    	; 0x7ac <__vector_18+0x238>
			case changeservo1:
				potentiometer_value = (atoi(receiveuart)*servodivision)+positionm90dutycycle;
     6be:	88 e1       	ldi	r24, 0x18	; 24
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <atoi>
     6c6:	bc 01       	movw	r22, r24
     6c8:	99 0f       	add	r25, r25
     6ca:	88 0b       	sbc	r24, r24
     6cc:	99 0b       	sbc	r25, r25
     6ce:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
     6d2:	21 e0       	ldi	r18, 0x01	; 1
     6d4:	30 e2       	ldi	r19, 0x20	; 32
     6d6:	45 e2       	ldi	r20, 0x25	; 37
     6d8:	5d e3       	ldi	r21, 0x3D	; 61
     6da:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	40 e2       	ldi	r20, 0x20	; 32
     6e4:	50 e4       	ldi	r21, 0x40	; 64
     6e6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__addsf3>
     6ea:	ab 01       	movw	r20, r22
     6ec:	bc 01       	movw	r22, r24
     6ee:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <potentiometer_value>
     6f2:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <potentiometer_value+0x1>
     6f6:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <potentiometer_value+0x2>
     6fa:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <potentiometer_value+0x3>
				updatedutycycle(OC1A, potentiometer_value);
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <updatedutycycle>
				break;
     704:	53 c0       	rjmp	.+166    	; 0x7ac <__vector_18+0x238>
			case changeservo2:
				potentiometer_value = atoi(receiveuart);
     706:	88 e1       	ldi	r24, 0x18	; 24
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <atoi>
     70e:	bc 01       	movw	r22, r24
     710:	99 0f       	add	r25, r25
     712:	88 0b       	sbc	r24, r24
     714:	99 0b       	sbc	r25, r25
     716:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
     71a:	ab 01       	movw	r20, r22
     71c:	bc 01       	movw	r22, r24
     71e:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <potentiometer_value>
     722:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <potentiometer_value+0x1>
     726:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <potentiometer_value+0x2>
     72a:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <potentiometer_value+0x3>
				updatedutycycle(OC0A, potentiometer_value);
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <updatedutycycle>
				break;
     734:	3b c0       	rjmp	.+118    	; 0x7ac <__vector_18+0x238>
			case changeservo3:
				potentiometer_value = atoi(receiveuart);
     736:	88 e1       	ldi	r24, 0x18	; 24
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <atoi>
     73e:	bc 01       	movw	r22, r24
     740:	99 0f       	add	r25, r25
     742:	88 0b       	sbc	r24, r24
     744:	99 0b       	sbc	r25, r25
     746:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
     74a:	ab 01       	movw	r20, r22
     74c:	bc 01       	movw	r22, r24
     74e:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <potentiometer_value>
     752:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <potentiometer_value+0x1>
     756:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <potentiometer_value+0x2>
     75a:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <potentiometer_value+0x3>
				updatedutycycle(OC0B, potentiometer_value);
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <updatedutycycle>
				break;
     764:	23 c0       	rjmp	.+70     	; 0x7ac <__vector_18+0x238>
			case changeservo4:
				potentiometer_value = (atoi(receiveuart)*servodivision)+positionm90dutycycle;
     766:	88 e1       	ldi	r24, 0x18	; 24
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <atoi>
     76e:	bc 01       	movw	r22, r24
     770:	99 0f       	add	r25, r25
     772:	88 0b       	sbc	r24, r24
     774:	99 0b       	sbc	r25, r25
     776:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
     77a:	21 e0       	ldi	r18, 0x01	; 1
     77c:	30 e2       	ldi	r19, 0x20	; 32
     77e:	45 e2       	ldi	r20, 0x25	; 37
     780:	5d e3       	ldi	r21, 0x3D	; 61
     782:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	40 e2       	ldi	r20, 0x20	; 32
     78c:	50 e4       	ldi	r21, 0x40	; 64
     78e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__addsf3>
     792:	ab 01       	movw	r20, r22
     794:	bc 01       	movw	r22, r24
     796:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <potentiometer_value>
     79a:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <potentiometer_value+0x1>
     79e:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <potentiometer_value+0x2>
     7a2:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <potentiometer_value+0x3>
				updatedutycycle(OC1B, potentiometer_value);
     7a6:	84 e0       	ldi	r24, 0x04	; 4
     7a8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <updatedutycycle>
				break;
			default:
				break;
		}
		countuartaddresssaved=0;																					//Restart count to save values
     7ac:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <countuartaddresssaved>
		uart_control=startuartsel;
     7b0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <uart_control>
	}
}
     7b4:	ff 91       	pop	r31
     7b6:	ef 91       	pop	r30
     7b8:	bf 91       	pop	r27
     7ba:	af 91       	pop	r26
     7bc:	9f 91       	pop	r25
     7be:	8f 91       	pop	r24
     7c0:	7f 91       	pop	r23
     7c2:	6f 91       	pop	r22
     7c4:	5f 91       	pop	r21
     7c6:	4f 91       	pop	r20
     7c8:	3f 91       	pop	r19
     7ca:	2f 91       	pop	r18
     7cc:	0f 90       	pop	r0
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	0f 90       	pop	r0
     7d2:	1f 90       	pop	r1
     7d4:	18 95       	reti

000007d6 <__vector_5>:
//PIN CHANGE INTERRUPT	-----------------------------------------------//
ISR(PCINT2_vect){
     7d6:	1f 92       	push	r1
     7d8:	0f 92       	push	r0
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	0f 92       	push	r0
     7de:	11 24       	eor	r1, r1
     7e0:	2f 93       	push	r18
     7e2:	3f 93       	push	r19
     7e4:	4f 93       	push	r20
     7e6:	5f 93       	push	r21
     7e8:	6f 93       	push	r22
     7ea:	7f 93       	push	r23
     7ec:	8f 93       	push	r24
     7ee:	9f 93       	push	r25
     7f0:	af 93       	push	r26
     7f2:	bf 93       	push	r27
     7f4:	ef 93       	push	r30
     7f6:	ff 93       	push	r31
	if((PIND&0x08)==0){
     7f8:	4b 99       	sbic	0x09, 3	; 9
     7fa:	21 c0       	rjmp	.+66     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
		reenable_pinchange = modebtn;
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reenable_pinchange>
		operating_mode = (operating_mode==uart)?manual:operating_mode+1;
     802:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <operating_mode>
     806:	83 30       	cpi	r24, 0x03	; 3
     808:	11 f0       	breq	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80a:	8f 5f       	subi	r24, 0xFF	; 255
     80c:	01 c0       	rjmp	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <operating_mode>
		if(operating_mode==manual){
     814:	81 30       	cpi	r24, 0x01	; 1
     816:	29 f4       	brne	.+10     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
			writeTextUART("10");
     818:	84 e0       	ldi	r24, 0x04	; 4
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <writeTextUART>
     820:	0b c0       	rjmp	.+22     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
		}else if(operating_mode==eeprom){
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	29 f4       	brne	.+10     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
			writeTextUART("11");
     826:	87 e0       	ldi	r24, 0x07	; 7
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <writeTextUART>
     82e:	04 c0       	rjmp	.+8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
		}else {
			writeTextUART("12");
     830:	8a e0       	ldi	r24, 0x0A	; 10
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <writeTextUART>
		}
		PCMSK2 = 0;															//Unable Pin Change Interrupt
     838:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
     83c:	13 c0       	rjmp	.+38     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
	}
	else if((PIND&0x10)==0){
     83e:	4c 99       	sbic	0x09, 4	; 9
     840:	11 c0       	rjmp	.+34     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
		PCMSK2 = 0;															//Unable Pin Change Interrupt
     842:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
		reenable_pinchange = select_routine;
     846:	84 e0       	ldi	r24, 0x04	; 4
     848:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reenable_pinchange>
		selectedroutine = (selectedroutine<5)?(selectedroutine+1):(1);
     84c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     850:	85 30       	cpi	r24, 0x05	; 5
     852:	10 f4       	brcc	.+4      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     854:	8f 5f       	subi	r24, 0xFF	; 255
     856:	01 c0       	rjmp	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		starteeprom = startposition;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	}
}
     864:	ff 91       	pop	r31
     866:	ef 91       	pop	r30
     868:	bf 91       	pop	r27
     86a:	af 91       	pop	r26
     86c:	9f 91       	pop	r25
     86e:	8f 91       	pop	r24
     870:	7f 91       	pop	r23
     872:	6f 91       	pop	r22
     874:	5f 91       	pop	r21
     876:	4f 91       	pop	r20
     878:	3f 91       	pop	r19
     87a:	2f 91       	pop	r18
     87c:	0f 90       	pop	r0
     87e:	0f be       	out	0x3f, r0	; 63
     880:	0f 90       	pop	r0
     882:	1f 90       	pop	r1
     884:	18 95       	reti

00000886 <initPWM>:
#include "PWM.h"

uint8_t maxfromdutycycle = 0;
uint16_t maxfromdutycycle1 = 0;

void initPWM(uint8_t sel_output, uint8_t sel_inverted, uint8_t pwmtype, uint16_t max, uint8_t prescaler, uint8_t enableinterrupt, float dutycycle){
     886:	8f 92       	push	r8
     888:	9f 92       	push	r9
     88a:	af 92       	push	r10
     88c:	bf 92       	push	r11
     88e:	cf 92       	push	r12
     890:	df 92       	push	r13
     892:	ef 92       	push	r14
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
	//Check conditions of input variables
	if((sel_output>=1)&&(sel_output<=6)&&(sel_inverted<=1)&&(pwmtype>=1)&&(pwmtype<=6)&&(max>=0)&&(max<=0xFFFF)&&(prescaler>=1)&&(prescaler<=7)&&(enableinterrupt<=4)&&(dutycycle<=100)){
     89c:	9f ef       	ldi	r25, 0xFF	; 255
     89e:	98 0f       	add	r25, r24
     8a0:	96 30       	cpi	r25, 0x06	; 6
     8a2:	08 f0       	brcs	.+2      	; 0x8a6 <initPWM+0x20>
     8a4:	7a c4       	rjmp	.+2292   	; 0x119a <__stack+0x89b>
     8a6:	62 30       	cpi	r22, 0x02	; 2
     8a8:	08 f0       	brcs	.+2      	; 0x8ac <initPWM+0x26>
     8aa:	77 c4       	rjmp	.+2286   	; 0x119a <__stack+0x89b>
     8ac:	44 23       	and	r20, r20
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <initPWM+0x2c>
     8b0:	74 c4       	rjmp	.+2280   	; 0x119a <__stack+0x89b>
     8b2:	47 30       	cpi	r20, 0x07	; 7
     8b4:	08 f0       	brcs	.+2      	; 0x8b8 <initPWM+0x32>
     8b6:	71 c4       	rjmp	.+2274   	; 0x119a <__stack+0x89b>
     8b8:	00 23       	and	r16, r16
     8ba:	09 f4       	brne	.+2      	; 0x8be <initPWM+0x38>
     8bc:	6e c4       	rjmp	.+2268   	; 0x119a <__stack+0x89b>
     8be:	08 30       	cpi	r16, 0x08	; 8
     8c0:	08 f0       	brcs	.+2      	; 0x8c4 <initPWM+0x3e>
     8c2:	6b c4       	rjmp	.+2262   	; 0x119a <__stack+0x89b>
     8c4:	94 e0       	ldi	r25, 0x04	; 4
     8c6:	9e 15       	cp	r25, r14
     8c8:	08 f4       	brcc	.+2      	; 0x8cc <initPWM+0x46>
     8ca:	67 c4       	rjmp	.+2254   	; 0x119a <__stack+0x89b>
     8cc:	45 01       	movw	r8, r10
     8ce:	56 01       	movw	r10, r12
     8d0:	69 01       	movw	r12, r18
     8d2:	14 2f       	mov	r17, r20
     8d4:	d6 2f       	mov	r29, r22
     8d6:	c8 2f       	mov	r28, r24
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	48 ec       	ldi	r20, 0xC8	; 200
     8de:	52 e4       	ldi	r21, 0x42	; 66
     8e0:	c5 01       	movw	r24, r10
     8e2:	b4 01       	movw	r22, r8
     8e4:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__cmpsf2>
     8e8:	18 16       	cp	r1, r24
     8ea:	0c f4       	brge	.+2      	; 0x8ee <initPWM+0x68>
     8ec:	56 c4       	rjmp	.+2220   	; 0x119a <__stack+0x89b>
		switch(sel_output){
     8ee:	c3 30       	cpi	r28, 0x03	; 3
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <initPWM+0x6e>
     8f2:	9a c0       	rjmp	.+308    	; 0xa28 <__stack+0x129>
     8f4:	30 f4       	brcc	.+12     	; 0x902 <__stack+0x3>
     8f6:	c1 30       	cpi	r28, 0x01	; 1
     8f8:	69 f0       	breq	.+26     	; 0x914 <__stack+0x15>
     8fa:	c2 30       	cpi	r28, 0x02	; 2
     8fc:	09 f4       	brne	.+2      	; 0x900 <__stack+0x1>
     8fe:	4f c0       	rjmp	.+158    	; 0x99e <__stack+0x9f>
     900:	4c c4       	rjmp	.+2200   	; 0x119a <__stack+0x89b>
     902:	c5 30       	cpi	r28, 0x05	; 5
     904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
     906:	9e c3       	rjmp	.+1852   	; 0x1044 <__stack+0x745>
     908:	08 f4       	brcc	.+2      	; 0x90c <__stack+0xd>
     90a:	f0 c1       	rjmp	.+992    	; 0xcec <__stack+0x3ed>
     90c:	c6 30       	cpi	r28, 0x06	; 6
     90e:	09 f4       	brne	.+2      	; 0x912 <__stack+0x13>
     910:	e1 c3       	rjmp	.+1986   	; 0x10d4 <__stack+0x7d5>
     912:	43 c4       	rjmp	.+2182   	; 0x119a <__stack+0x89b>
			case OC0A:
				DDRD |= (1<<DDD6);															//Set PIND6 as output > OC0A
     914:	8a b1       	in	r24, 0x0a	; 10
     916:	80 64       	ori	r24, 0x40	; 64
     918:	8a b9       	out	0x0a, r24	; 10
				TCCR0A = 0;
     91a:	14 bc       	out	0x24, r1	; 36
				TCCR0A |= (sel_inverted==inverted)?((1<<COM0A1)|(1<<COM0A0)):(1<<COM0A1);	//Inverted or non-inverted signal
     91c:	84 b5       	in	r24, 0x24	; 36
     91e:	d1 30       	cpi	r29, 0x01	; 1
     920:	11 f4       	brne	.+4      	; 0x926 <__stack+0x27>
     922:	90 ec       	ldi	r25, 0xC0	; 192
     924:	01 c0       	rjmp	.+2      	; 0x928 <__stack+0x29>
     926:	90 e8       	ldi	r25, 0x80	; 128
     928:	89 2b       	or	r24, r25
     92a:	84 bd       	out	0x24, r24	; 36
				TCCR0A |= (pwmtype==fastmode)?((1<<WGM01)|(1<<WGM00)):(1<<WGM00);			//Fast PWM Mode or Phase Correct PWM Mode
     92c:	84 b5       	in	r24, 0x24	; 36
     92e:	12 30       	cpi	r17, 0x02	; 2
     930:	11 f4       	brne	.+4      	; 0x936 <__stack+0x37>
     932:	93 e0       	ldi	r25, 0x03	; 3
     934:	01 c0       	rjmp	.+2      	; 0x938 <__stack+0x39>
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	89 2b       	or	r24, r25
     93a:	84 bd       	out	0x24, r24	; 36
				TCCR0B = 0;
     93c:	15 bc       	out	0x25, r1	; 37
				TCCR0B |= (prescaler<=5)?(prescaler):(0x00);								//Prescaler selected
     93e:	85 b5       	in	r24, 0x25	; 37
     940:	06 30       	cpi	r16, 0x06	; 6
     942:	08 f0       	brcs	.+2      	; 0x946 <__stack+0x47>
     944:	00 e0       	ldi	r16, 0x00	; 0
     946:	80 2b       	or	r24, r16
     948:	85 bd       	out	0x25, r24	; 37
				if((max!=until_top)&&(max<0xFF)){
     94a:	c6 01       	movw	r24, r12
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	8e 3f       	cpi	r24, 0xFE	; 254
     950:	91 05       	cpc	r25, r1
     952:	28 f4       	brcc	.+10     	; 0x95e <__stack+0x5f>
					TCCR0B |= (1<<WGM02);													//Top on OCRA
     954:	85 b5       	in	r24, 0x25	; 37
     956:	88 60       	ori	r24, 0x08	; 8
     958:	85 bd       	out	0x25, r24	; 37
					OCR0A = max;
     95a:	c7 bc       	out	0x27, r12	; 39
     95c:	13 c0       	rjmp	.+38     	; 0x984 <__stack+0x85>
				}else{
					maxfromdutycycle = ((0xFF)*(dutycycle/100));
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	48 ec       	ldi	r20, 0xC8	; 200
     964:	52 e4       	ldi	r21, 0x42	; 66
     966:	c5 01       	movw	r24, r10
     968:	b4 01       	movw	r22, r8
     96a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	4f e7       	ldi	r20, 0x7F	; 127
     974:	53 e4       	ldi	r21, 0x43	; 67
     976:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     97a:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     97e:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <maxfromdutycycle>
					OCR0A = maxfromdutycycle;
     982:	67 bd       	out	0x27, r22	; 39
				}
				if((enableinterrupt!=0)&&(enableinterrupt!=3)){
     984:	ee 20       	and	r14, r14
     986:	09 f4       	brne	.+2      	; 0x98a <__stack+0x8b>
     988:	08 c4       	rjmp	.+2064   	; 0x119a <__stack+0x89b>
     98a:	83 e0       	ldi	r24, 0x03	; 3
     98c:	e8 16       	cp	r14, r24
     98e:	09 f4       	brne	.+2      	; 0x992 <__stack+0x93>
     990:	04 c4       	rjmp	.+2056   	; 0x119a <__stack+0x89b>
					TIMSK0 |= enableinterrupt;												//Enable timer interrupts
     992:	ee e6       	ldi	r30, 0x6E	; 110
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	e8 2a       	or	r14, r24
     99a:	e0 82       	st	Z, r14
     99c:	fe c3       	rjmp	.+2044   	; 0x119a <__stack+0x89b>
				}
				break;
			case OC0B:
				DDRD |= (1<<DDD5);															//Set PIND5 as output > OC0B
     99e:	8a b1       	in	r24, 0x0a	; 10
     9a0:	80 62       	ori	r24, 0x20	; 32
     9a2:	8a b9       	out	0x0a, r24	; 10
				PORTD |= (1<<DDD5);	
     9a4:	8b b1       	in	r24, 0x0b	; 11
     9a6:	80 62       	ori	r24, 0x20	; 32
     9a8:	8b b9       	out	0x0b, r24	; 11
				TCCR0A |= (sel_inverted==inverted)?((1<<COM0B1)|(1<<COM0B0)):(1<<COM0B1);	//Inverted or non-inverted signal
     9aa:	84 b5       	in	r24, 0x24	; 36
     9ac:	d1 30       	cpi	r29, 0x01	; 1
     9ae:	11 f4       	brne	.+4      	; 0x9b4 <__stack+0xb5>
     9b0:	90 e3       	ldi	r25, 0x30	; 48
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <__stack+0xb7>
     9b4:	90 e2       	ldi	r25, 0x20	; 32
     9b6:	89 2b       	or	r24, r25
     9b8:	84 bd       	out	0x24, r24	; 36
				TCCR0A |= (pwmtype==fastmode)?((1<<WGM01)|(1<<WGM00)):(1<<WGM00);			//Fast PWM Mode or Phase Correct PWM Mode
     9ba:	84 b5       	in	r24, 0x24	; 36
     9bc:	12 30       	cpi	r17, 0x02	; 2
     9be:	11 f4       	brne	.+4      	; 0x9c4 <__stack+0xc5>
     9c0:	93 e0       	ldi	r25, 0x03	; 3
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <__stack+0xc7>
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	89 2b       	or	r24, r25
     9c8:	84 bd       	out	0x24, r24	; 36
				TCCR0B |= (prescaler<=5)?(prescaler):(0x00);								//Prescaler selected
     9ca:	85 b5       	in	r24, 0x25	; 37
     9cc:	06 30       	cpi	r16, 0x06	; 6
     9ce:	08 f0       	brcs	.+2      	; 0x9d2 <__stack+0xd3>
     9d0:	00 e0       	ldi	r16, 0x00	; 0
     9d2:	80 2b       	or	r24, r16
     9d4:	85 bd       	out	0x25, r24	; 37
				if((max!=until_top)&&(max<0xFF)){
     9d6:	c6 01       	movw	r24, r12
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	8e 3f       	cpi	r24, 0xFE	; 254
     9dc:	91 05       	cpc	r25, r1
     9de:	20 f4       	brcc	.+8      	; 0x9e8 <__stack+0xe9>
					TCCR0B |= (1<<WGM02);													//Top on OCRA
     9e0:	85 b5       	in	r24, 0x25	; 37
     9e2:	88 60       	ori	r24, 0x08	; 8
     9e4:	85 bd       	out	0x25, r24	; 37
					OCR0A = max;
     9e6:	c7 bc       	out	0x27, r12	; 39
				}
				maxfromdutycycle = ((0xFF)*(dutycycle/100));
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	48 ec       	ldi	r20, 0xC8	; 200
     9ee:	52 e4       	ldi	r21, 0x42	; 66
     9f0:	c5 01       	movw	r24, r10
     9f2:	b4 01       	movw	r22, r8
     9f4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	4f e7       	ldi	r20, 0x7F	; 127
     9fe:	53 e4       	ldi	r21, 0x43	; 67
     a00:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     a04:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     a08:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <maxfromdutycycle>
				OCR0B = maxfromdutycycle;
     a0c:	68 bd       	out	0x28, r22	; 40
				if((enableinterrupt!=0)&&(enableinterrupt!=3)){
     a0e:	ee 20       	and	r14, r14
     a10:	09 f4       	brne	.+2      	; 0xa14 <__stack+0x115>
     a12:	c3 c3       	rjmp	.+1926   	; 0x119a <__stack+0x89b>
     a14:	93 e0       	ldi	r25, 0x03	; 3
     a16:	e9 16       	cp	r14, r25
     a18:	09 f4       	brne	.+2      	; 0xa1c <__stack+0x11d>
     a1a:	bf c3       	rjmp	.+1918   	; 0x119a <__stack+0x89b>
					TIMSK0 |= enableinterrupt;												//Enable timer interrupts
     a1c:	ee e6       	ldi	r30, 0x6E	; 110
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	e8 2a       	or	r14, r24
     a24:	e0 82       	st	Z, r14
     a26:	b9 c3       	rjmp	.+1906   	; 0x119a <__stack+0x89b>
				}
				break;
						
			case OC1A:
				DDRB |= (1<<DDB1);															//Set PINB1 as output > OC1A
     a28:	84 b1       	in	r24, 0x04	; 4
     a2a:	82 60       	ori	r24, 0x02	; 2
     a2c:	84 b9       	out	0x04, r24	; 4
				TCCR1A |= (sel_inverted==inverted)?((1<<COM1A1)|(1<<COM1A0)):(1<<COM1A1);	//Inverted or non-inverted signal
     a2e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     a32:	d1 30       	cpi	r29, 0x01	; 1
     a34:	11 f4       	brne	.+4      	; 0xa3a <__stack+0x13b>
     a36:	90 ec       	ldi	r25, 0xC0	; 192
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <__stack+0x13d>
     a3a:	90 e8       	ldi	r25, 0x80	; 128
     a3c:	89 2b       	or	r24, r25
     a3e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
				TCCR1B |= (prescaler<=5)?(prescaler):(0x00);								//Prescaler selected
     a42:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     a46:	06 30       	cpi	r16, 0x06	; 6
     a48:	08 f0       	brcs	.+2      	; 0xa4c <__stack+0x14d>
     a4a:	00 e0       	ldi	r16, 0x00	; 0
     a4c:	80 2b       	or	r24, r16
     a4e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
				switch(pwmtype){
     a52:	13 30       	cpi	r17, 0x03	; 3
     a54:	09 f4       	brne	.+2      	; 0xa58 <__stack+0x159>
     a56:	db c0       	rjmp	.+438    	; 0xc0e <__stack+0x30f>
     a58:	30 f4       	brcc	.+12     	; 0xa66 <__stack+0x167>
     a5a:	11 30       	cpi	r17, 0x01	; 1
     a5c:	69 f0       	breq	.+26     	; 0xa78 <__stack+0x179>
     a5e:	12 30       	cpi	r17, 0x02	; 2
     a60:	09 f4       	brne	.+2      	; 0xa64 <__stack+0x165>
     a62:	6d c0       	rjmp	.+218    	; 0xb3e <__stack+0x23f>
     a64:	30 c1       	rjmp	.+608    	; 0xcc6 <__stack+0x3c7>
     a66:	15 30       	cpi	r17, 0x05	; 5
     a68:	09 f4       	brne	.+2      	; 0xa6c <__stack+0x16d>
     a6a:	f7 c0       	rjmp	.+494    	; 0xc5a <__stack+0x35b>
     a6c:	08 f4       	brcc	.+2      	; 0xa70 <__stack+0x171>
     a6e:	e6 c0       	rjmp	.+460    	; 0xc3c <__stack+0x33d>
     a70:	16 30       	cpi	r17, 0x06	; 6
     a72:	09 f4       	brne	.+2      	; 0xa76 <__stack+0x177>
     a74:	1a c1       	rjmp	.+564    	; 0xcaa <__stack+0x3ab>
     a76:	27 c1       	rjmp	.+590    	; 0xcc6 <__stack+0x3c7>
					case phasecorrectmode:
						TCCR1A |= (max==0xFF)?(1<<WGM10):((max==0x1FF)?(1<<WGM11):((max==0x3FF)?((1<<WGM11)|(1<<WGM10)):0));
     a78:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	c8 16       	cp	r12, r24
     a80:	d1 04       	cpc	r13, r1
     a82:	61 f0       	breq	.+24     	; 0xa9c <__stack+0x19d>
     a84:	8f ef       	ldi	r24, 0xFF	; 255
     a86:	c8 16       	cp	r12, r24
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	d8 06       	cpc	r13, r24
     a8c:	49 f0       	breq	.+18     	; 0xaa0 <__stack+0x1a1>
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	c8 16       	cp	r12, r24
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	d8 06       	cpc	r13, r24
     a96:	31 f4       	brne	.+12     	; 0xaa4 <__stack+0x1a5>
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__stack+0x1a7>
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <__stack+0x1a7>
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <__stack+0x1a7>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	89 2b       	or	r24, r25
     aa8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
						uint8_t OCR1Avaluepc = (max==0xFF)?((0xFF)*(dutycycle/100)):((max==0x1FF)?((0x1FF)*(dutycycle/100)):((max==0x3FF)?((0x3FF)*(dutycycle/100)):0));
     aac:	9f ef       	ldi	r25, 0xFF	; 255
     aae:	c9 16       	cp	r12, r25
     ab0:	d1 04       	cpc	r13, r1
     ab2:	89 f4       	brne	.+34     	; 0xad6 <__stack+0x1d7>
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	48 ec       	ldi	r20, 0xC8	; 200
     aba:	52 e4       	ldi	r21, 0x42	; 66
     abc:	c5 01       	movw	r24, r10
     abe:	b4 01       	movw	r22, r8
     ac0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	4f e7       	ldi	r20, 0x7F	; 127
     aca:	53 e4       	ldi	r21, 0x43	; 67
     acc:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     ad0:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__stack+0x231>
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	c8 16       	cp	r12, r24
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	d8 06       	cpc	r13, r24
     ade:	89 f4       	brne	.+34     	; 0xb02 <__stack+0x203>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	48 ec       	ldi	r20, 0xC8	; 200
     ae6:	52 e4       	ldi	r21, 0x42	; 66
     ae8:	c5 01       	movw	r24, r10
     aea:	b4 01       	movw	r22, r8
     aec:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e8       	ldi	r19, 0x80	; 128
     af4:	4f ef       	ldi	r20, 0xFF	; 255
     af6:	53 e4       	ldi	r21, 0x43	; 67
     af8:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     afc:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     b00:	17 c0       	rjmp	.+46     	; 0xb30 <__stack+0x231>
     b02:	9f ef       	ldi	r25, 0xFF	; 255
     b04:	c9 16       	cp	r12, r25
     b06:	93 e0       	ldi	r25, 0x03	; 3
     b08:	d9 06       	cpc	r13, r25
     b0a:	89 f4       	brne	.+34     	; 0xb2e <__stack+0x22f>
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	48 ec       	ldi	r20, 0xC8	; 200
     b12:	52 e4       	ldi	r21, 0x42	; 66
     b14:	c5 01       	movw	r24, r10
     b16:	b4 01       	movw	r22, r8
     b18:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 ec       	ldi	r19, 0xC0	; 192
     b20:	4f e7       	ldi	r20, 0x7F	; 127
     b22:	54 e4       	ldi	r21, 0x44	; 68
     b24:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     b28:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     b2c:	01 c0       	rjmp	.+2      	; 0xb30 <__stack+0x231>
     b2e:	60 e0       	ldi	r22, 0x00	; 0
						OCR1A = OCR1Avaluepc;
     b30:	86 2f       	mov	r24, r22
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     b38:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
						break;
     b3c:	c4 c0       	rjmp	.+392    	; 0xcc6 <__stack+0x3c7>
					case fastmode:
						TCCR1A |= (max==0xFF)?(1<<WGM10):((max==0x1FF)?(1<<WGM11):((max==0x3FF)?((1<<WGM11)|(1<<WGM10)):0));
     b3e:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	c8 16       	cp	r12, r24
     b46:	d1 04       	cpc	r13, r1
     b48:	61 f0       	breq	.+24     	; 0xb62 <__stack+0x263>
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	c8 16       	cp	r12, r24
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	d8 06       	cpc	r13, r24
     b52:	49 f0       	breq	.+18     	; 0xb66 <__stack+0x267>
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	c8 16       	cp	r12, r24
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	d8 06       	cpc	r13, r24
     b5c:	31 f4       	brne	.+12     	; 0xb6a <__stack+0x26b>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	05 c0       	rjmp	.+10     	; 0xb6c <__stack+0x26d>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <__stack+0x26d>
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	01 c0       	rjmp	.+2      	; 0xb6c <__stack+0x26d>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	89 2b       	or	r24, r25
     b6e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
						TCCR1B |= (1<<WGM12);
     b72:	e1 e8       	ldi	r30, 0x81	; 129
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	88 60       	ori	r24, 0x08	; 8
     b7a:	80 83       	st	Z, r24
						uint8_t OCR1Avaluef = (max==0xFF)?((0xFF)*(dutycycle/100)):((max==0x1FF)?((0x1FF)*(dutycycle/100)):((max==0x3FF)?((0x3FF)*(dutycycle/100)):0));
     b7c:	9f ef       	ldi	r25, 0xFF	; 255
     b7e:	c9 16       	cp	r12, r25
     b80:	d1 04       	cpc	r13, r1
     b82:	89 f4       	brne	.+34     	; 0xba6 <__stack+0x2a7>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	48 ec       	ldi	r20, 0xC8	; 200
     b8a:	52 e4       	ldi	r21, 0x42	; 66
     b8c:	c5 01       	movw	r24, r10
     b8e:	b4 01       	movw	r22, r8
     b90:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	4f e7       	ldi	r20, 0x7F	; 127
     b9a:	53 e4       	ldi	r21, 0x43	; 67
     b9c:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     ba0:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     ba4:	2d c0       	rjmp	.+90     	; 0xc00 <__stack+0x301>
     ba6:	8f ef       	ldi	r24, 0xFF	; 255
     ba8:	c8 16       	cp	r12, r24
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	d8 06       	cpc	r13, r24
     bae:	89 f4       	brne	.+34     	; 0xbd2 <__stack+0x2d3>
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	48 ec       	ldi	r20, 0xC8	; 200
     bb6:	52 e4       	ldi	r21, 0x42	; 66
     bb8:	c5 01       	movw	r24, r10
     bba:	b4 01       	movw	r22, r8
     bbc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e8       	ldi	r19, 0x80	; 128
     bc4:	4f ef       	ldi	r20, 0xFF	; 255
     bc6:	53 e4       	ldi	r21, 0x43	; 67
     bc8:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     bcc:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     bd0:	17 c0       	rjmp	.+46     	; 0xc00 <__stack+0x301>
     bd2:	9f ef       	ldi	r25, 0xFF	; 255
     bd4:	c9 16       	cp	r12, r25
     bd6:	93 e0       	ldi	r25, 0x03	; 3
     bd8:	d9 06       	cpc	r13, r25
     bda:	89 f4       	brne	.+34     	; 0xbfe <__stack+0x2ff>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	48 ec       	ldi	r20, 0xC8	; 200
     be2:	52 e4       	ldi	r21, 0x42	; 66
     be4:	c5 01       	movw	r24, r10
     be6:	b4 01       	movw	r22, r8
     be8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 ec       	ldi	r19, 0xC0	; 192
     bf0:	4f e7       	ldi	r20, 0x7F	; 127
     bf2:	54 e4       	ldi	r21, 0x44	; 68
     bf4:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     bf8:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <__stack+0x301>
     bfe:	60 e0       	ldi	r22, 0x00	; 0
						OCR1A = OCR1Avaluef;
     c00:	86 2f       	mov	r24, r22
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     c08:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
						break;
     c0c:	5c c0       	rjmp	.+184    	; 0xcc6 <__stack+0x3c7>
					case phasecorrecticrmode:
						TCCR1A |= (1<<WGM11);
     c0e:	e0 e8       	ldi	r30, 0x80	; 128
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	82 60       	ori	r24, 0x02	; 2
     c16:	80 83       	st	Z, r24
						TCCR1B |= (1<<WGM13);
     c18:	e1 e8       	ldi	r30, 0x81	; 129
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	80 61       	ori	r24, 0x10	; 16
     c20:	80 83       	st	Z, r24
						ICR1 = max;
     c22:	d0 92 87 00 	sts	0x0087, r13	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     c26:	c0 92 86 00 	sts	0x0086, r12	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
						OCR1A = dutycycle;
     c2a:	c5 01       	movw	r24, r10
     c2c:	b4 01       	movw	r22, r8
     c2e:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     c32:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     c36:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
						break;
     c3a:	45 c0       	rjmp	.+138    	; 0xcc6 <__stack+0x3c7>
					case phasecorrectocramode:
						TCCR1A |= (1<<WGM11)|(1<<WGM10);
     c3c:	e0 e8       	ldi	r30, 0x80	; 128
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	83 60       	ori	r24, 0x03	; 3
     c44:	80 83       	st	Z, r24
						TCCR1B |= (1<<WGM13);
     c46:	e1 e8       	ldi	r30, 0x81	; 129
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	80 61       	ori	r24, 0x10	; 16
     c4e:	80 83       	st	Z, r24
						OCR1A = max;
     c50:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     c54:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
						break;
     c58:	36 c0       	rjmp	.+108    	; 0xcc6 <__stack+0x3c7>
					case fasticrmode:
						TCCR1A |= (1<<WGM11);
     c5a:	e0 e8       	ldi	r30, 0x80	; 128
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	82 60       	ori	r24, 0x02	; 2
     c62:	80 83       	st	Z, r24
						TCCR1B |= (1<<WGM13)|(1<<WGM12);
     c64:	e1 e8       	ldi	r30, 0x81	; 129
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	88 61       	ori	r24, 0x18	; 24
     c6c:	80 83       	st	Z, r24
						ICR1 = max;
     c6e:	d0 92 87 00 	sts	0x0087, r13	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     c72:	c0 92 86 00 	sts	0x0086, r12	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
						maxfromdutycycle1 = ((max*dutycycle)/100);
     c76:	b6 01       	movw	r22, r12
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__floatunsisf>
     c80:	a5 01       	movw	r20, r10
     c82:	94 01       	movw	r18, r8
     c84:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	48 ec       	ldi	r20, 0xC8	; 200
     c8e:	52 e4       	ldi	r21, 0x42	; 66
     c90:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     c94:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     c98:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <maxfromdutycycle1+0x1>
     c9c:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <maxfromdutycycle1>
						OCR1A = maxfromdutycycle1;
     ca0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     ca4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
						break;
     ca8:	0e c0       	rjmp	.+28     	; 0xcc6 <__stack+0x3c7>
					case fastocramode:
						TCCR1A |= (1<<WGM11)|(1<<WGM10);
     caa:	e0 e8       	ldi	r30, 0x80	; 128
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	83 60       	ori	r24, 0x03	; 3
     cb2:	80 83       	st	Z, r24
						TCCR1B |= (1<<WGM13)|(1<<WGM12);
     cb4:	e1 e8       	ldi	r30, 0x81	; 129
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	88 61       	ori	r24, 0x18	; 24
     cbc:	80 83       	st	Z, r24
						OCR1A = max;
     cbe:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     cc2:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
						break;
					default:
						break;
				}
				if((enableinterrupt!=0)&&(enableinterrupt!=3)){
     cc6:	ee 20       	and	r14, r14
     cc8:	41 f0       	breq	.+16     	; 0xcda <__stack+0x3db>
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	e8 16       	cp	r14, r24
     cce:	29 f0       	breq	.+10     	; 0xcda <__stack+0x3db>
					TIMSK1 |= enableinterrupt;												//Enable timer interrupts
     cd0:	ef e6       	ldi	r30, 0x6F	; 111
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8e 29       	or	r24, r14
     cd8:	80 83       	st	Z, r24
				}if(enableinterrupt==3){
     cda:	93 e0       	ldi	r25, 0x03	; 3
     cdc:	e9 12       	cpse	r14, r25
     cde:	5d c2       	rjmp	.+1210   	; 0x119a <__stack+0x89b>
					TIMSK1 |= (1<<ICIE1);													//Input Capture Interrupt
     ce0:	ef e6       	ldi	r30, 0x6F	; 111
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	80 62       	ori	r24, 0x20	; 32
     ce8:	80 83       	st	Z, r24
     cea:	57 c2       	rjmp	.+1198   	; 0x119a <__stack+0x89b>
				}
				break;
			case OC1B:
				DDRB |= (1<<DDB2);															//Set PINB2 as output > OC1B
     cec:	84 b1       	in	r24, 0x04	; 4
     cee:	84 60       	ori	r24, 0x04	; 4
     cf0:	84 b9       	out	0x04, r24	; 4
				TCCR1A |= (sel_inverted==inverted)?((1<<COM1B1)|(1<<COM1B0)):(1<<COM1B1);	//Inverted or non-inverted signal
     cf2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     cf6:	d1 30       	cpi	r29, 0x01	; 1
     cf8:	11 f4       	brne	.+4      	; 0xcfe <__stack+0x3ff>
     cfa:	90 e3       	ldi	r25, 0x30	; 48
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <__stack+0x401>
     cfe:	90 e2       	ldi	r25, 0x20	; 32
     d00:	89 2b       	or	r24, r25
     d02:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
				TCCR1B |= (prescaler<=5)?(prescaler):(0x00);
     d06:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d0a:	06 30       	cpi	r16, 0x06	; 6
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <__stack+0x411>
     d0e:	00 e0       	ldi	r16, 0x00	; 0
     d10:	80 2b       	or	r24, r16
     d12:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
				switch(pwmtype){
     d16:	13 30       	cpi	r17, 0x03	; 3
     d18:	09 f4       	brne	.+2      	; 0xd1c <__stack+0x41d>
     d1a:	db c0       	rjmp	.+438    	; 0xed2 <__stack+0x5d3>
     d1c:	30 f4       	brcc	.+12     	; 0xd2a <__stack+0x42b>
     d1e:	11 30       	cpi	r17, 0x01	; 1
     d20:	69 f0       	breq	.+26     	; 0xd3c <__stack+0x43d>
     d22:	12 30       	cpi	r17, 0x02	; 2
     d24:	09 f4       	brne	.+2      	; 0xd28 <__stack+0x429>
     d26:	6d c0       	rjmp	.+218    	; 0xe02 <__stack+0x503>
     d28:	79 c1       	rjmp	.+754    	; 0x101c <__stack+0x71d>
     d2a:	15 30       	cpi	r17, 0x05	; 5
     d2c:	09 f4       	brne	.+2      	; 0xd30 <__stack+0x431>
     d2e:	25 c1       	rjmp	.+586    	; 0xf7a <__stack+0x67b>
     d30:	08 f4       	brcc	.+2      	; 0xd34 <__stack+0x435>
     d32:	f9 c0       	rjmp	.+498    	; 0xf26 <__stack+0x627>
     d34:	16 30       	cpi	r17, 0x06	; 6
     d36:	09 f4       	brne	.+2      	; 0xd3a <__stack+0x43b>
     d38:	48 c1       	rjmp	.+656    	; 0xfca <__stack+0x6cb>
     d3a:	70 c1       	rjmp	.+736    	; 0x101c <__stack+0x71d>
					case phasecorrectmode:
						TCCR1A |= (max==0xFF)?(1<<WGM10):((max==0x1FF)?(1<<WGM11):((max==0x3FF)?((1<<WGM11)|(1<<WGM10)):0));
     d3c:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	c8 16       	cp	r12, r24
     d44:	d1 04       	cpc	r13, r1
     d46:	61 f0       	breq	.+24     	; 0xd60 <__stack+0x461>
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	c8 16       	cp	r12, r24
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	d8 06       	cpc	r13, r24
     d50:	49 f0       	breq	.+18     	; 0xd64 <__stack+0x465>
     d52:	8f ef       	ldi	r24, 0xFF	; 255
     d54:	c8 16       	cp	r12, r24
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	d8 06       	cpc	r13, r24
     d5a:	31 f4       	brne	.+12     	; 0xd68 <__stack+0x469>
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	05 c0       	rjmp	.+10     	; 0xd6a <__stack+0x46b>
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <__stack+0x46b>
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <__stack+0x46b>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	89 2b       	or	r24, r25
     d6c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
						uint8_t OCR1Bvaluepc1 = (max==0xFF)?((0xFF)*(dutycycle/100)):((max==0x1FF)?((0x1FF)*(dutycycle/100)):((max==0x3FF)?((0x3FF)*(dutycycle/100)):0));
     d70:	9f ef       	ldi	r25, 0xFF	; 255
     d72:	c9 16       	cp	r12, r25
     d74:	d1 04       	cpc	r13, r1
     d76:	89 f4       	brne	.+34     	; 0xd9a <__stack+0x49b>
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	48 ec       	ldi	r20, 0xC8	; 200
     d7e:	52 e4       	ldi	r21, 0x42	; 66
     d80:	c5 01       	movw	r24, r10
     d82:	b4 01       	movw	r22, r8
     d84:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	4f e7       	ldi	r20, 0x7F	; 127
     d8e:	53 e4       	ldi	r21, 0x43	; 67
     d90:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     d94:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     d98:	2d c0       	rjmp	.+90     	; 0xdf4 <__stack+0x4f5>
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	c8 16       	cp	r12, r24
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	d8 06       	cpc	r13, r24
     da2:	89 f4       	brne	.+34     	; 0xdc6 <__stack+0x4c7>
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	48 ec       	ldi	r20, 0xC8	; 200
     daa:	52 e4       	ldi	r21, 0x42	; 66
     dac:	c5 01       	movw	r24, r10
     dae:	b4 01       	movw	r22, r8
     db0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e8       	ldi	r19, 0x80	; 128
     db8:	4f ef       	ldi	r20, 0xFF	; 255
     dba:	53 e4       	ldi	r21, 0x43	; 67
     dbc:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     dc0:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     dc4:	17 c0       	rjmp	.+46     	; 0xdf4 <__stack+0x4f5>
     dc6:	9f ef       	ldi	r25, 0xFF	; 255
     dc8:	c9 16       	cp	r12, r25
     dca:	93 e0       	ldi	r25, 0x03	; 3
     dcc:	d9 06       	cpc	r13, r25
     dce:	89 f4       	brne	.+34     	; 0xdf2 <__stack+0x4f3>
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	48 ec       	ldi	r20, 0xC8	; 200
     dd6:	52 e4       	ldi	r21, 0x42	; 66
     dd8:	c5 01       	movw	r24, r10
     dda:	b4 01       	movw	r22, r8
     ddc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 ec       	ldi	r19, 0xC0	; 192
     de4:	4f e7       	ldi	r20, 0x7F	; 127
     de6:	54 e4       	ldi	r21, 0x44	; 68
     de8:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     dec:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <__stack+0x4f5>
     df2:	60 e0       	ldi	r22, 0x00	; 0
						OCR1B = OCR1Bvaluepc1;
     df4:	86 2f       	mov	r24, r22
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     dfc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
						break;
     e00:	0d c1       	rjmp	.+538    	; 0x101c <__stack+0x71d>
					case fastmode:
						TCCR1A |= (max==0xFF)?(1<<WGM10):((max==0x1FF)?(1<<WGM11):((max==0x3FF)?((1<<WGM11)|(1<<WGM10)):0));
     e02:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	c8 16       	cp	r12, r24
     e0a:	d1 04       	cpc	r13, r1
     e0c:	61 f0       	breq	.+24     	; 0xe26 <__stack+0x527>
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	c8 16       	cp	r12, r24
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	d8 06       	cpc	r13, r24
     e16:	49 f0       	breq	.+18     	; 0xe2a <__stack+0x52b>
     e18:	8f ef       	ldi	r24, 0xFF	; 255
     e1a:	c8 16       	cp	r12, r24
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	d8 06       	cpc	r13, r24
     e20:	31 f4       	brne	.+12     	; 0xe2e <__stack+0x52f>
     e22:	83 e0       	ldi	r24, 0x03	; 3
     e24:	05 c0       	rjmp	.+10     	; 0xe30 <__stack+0x531>
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	03 c0       	rjmp	.+6      	; 0xe30 <__stack+0x531>
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	01 c0       	rjmp	.+2      	; 0xe30 <__stack+0x531>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	89 2b       	or	r24, r25
     e32:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
						TCCR1B |= (1<<WGM12);
     e36:	e1 e8       	ldi	r30, 0x81	; 129
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	88 60       	ori	r24, 0x08	; 8
     e3e:	80 83       	st	Z, r24
						uint8_t OCR1Bvaluef1 = (max==0xFF)?((0xFF)*(dutycycle/100)):((max==0x1FF)?((0x1FF)*(dutycycle/100)):((max==0x3FF)?((0x3FF)*(dutycycle/100)):0));
     e40:	9f ef       	ldi	r25, 0xFF	; 255
     e42:	c9 16       	cp	r12, r25
     e44:	d1 04       	cpc	r13, r1
     e46:	89 f4       	brne	.+34     	; 0xe6a <__stack+0x56b>
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	48 ec       	ldi	r20, 0xC8	; 200
     e4e:	52 e4       	ldi	r21, 0x42	; 66
     e50:	c5 01       	movw	r24, r10
     e52:	b4 01       	movw	r22, r8
     e54:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	4f e7       	ldi	r20, 0x7F	; 127
     e5e:	53 e4       	ldi	r21, 0x43	; 67
     e60:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     e64:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__stack+0x5c5>
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
     e6c:	c8 16       	cp	r12, r24
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	d8 06       	cpc	r13, r24
     e72:	89 f4       	brne	.+34     	; 0xe96 <__stack+0x597>
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	48 ec       	ldi	r20, 0xC8	; 200
     e7a:	52 e4       	ldi	r21, 0x42	; 66
     e7c:	c5 01       	movw	r24, r10
     e7e:	b4 01       	movw	r22, r8
     e80:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e8       	ldi	r19, 0x80	; 128
     e88:	4f ef       	ldi	r20, 0xFF	; 255
     e8a:	53 e4       	ldi	r21, 0x43	; 67
     e8c:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     e90:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     e94:	17 c0       	rjmp	.+46     	; 0xec4 <__stack+0x5c5>
     e96:	9f ef       	ldi	r25, 0xFF	; 255
     e98:	c9 16       	cp	r12, r25
     e9a:	93 e0       	ldi	r25, 0x03	; 3
     e9c:	d9 06       	cpc	r13, r25
     e9e:	89 f4       	brne	.+34     	; 0xec2 <__stack+0x5c3>
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	48 ec       	ldi	r20, 0xC8	; 200
     ea6:	52 e4       	ldi	r21, 0x42	; 66
     ea8:	c5 01       	movw	r24, r10
     eaa:	b4 01       	movw	r22, r8
     eac:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 ec       	ldi	r19, 0xC0	; 192
     eb4:	4f e7       	ldi	r20, 0x7F	; 127
     eb6:	54 e4       	ldi	r21, 0x44	; 68
     eb8:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     ebc:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     ec0:	01 c0       	rjmp	.+2      	; 0xec4 <__stack+0x5c5>
     ec2:	60 e0       	ldi	r22, 0x00	; 0
						OCR1B = OCR1Bvaluef1;
     ec4:	86 2f       	mov	r24, r22
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     ecc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
						break;
     ed0:	a5 c0       	rjmp	.+330    	; 0x101c <__stack+0x71d>

					case phasecorrecticrmode:
						TCCR1A |= (1<<WGM11);
     ed2:	e0 e8       	ldi	r30, 0x80	; 128
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	80 83       	st	Z, r24
						TCCR1B |= (1<<WGM13);
     edc:	e1 e8       	ldi	r30, 0x81	; 129
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 61       	ori	r24, 0x10	; 16
     ee4:	80 83       	st	Z, r24
						ICR1 = max;
     ee6:	d0 92 87 00 	sts	0x0087, r13	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     eea:	c0 92 86 00 	sts	0x0086, r12	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
						uint8_t OCR1Bvaluepci1 = (max*(dutycycle/100));
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	48 ec       	ldi	r20, 0xC8	; 200
     ef4:	52 e4       	ldi	r21, 0x42	; 66
     ef6:	c5 01       	movw	r24, r10
     ef8:	b4 01       	movw	r22, r8
     efa:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     efe:	4b 01       	movw	r8, r22
     f00:	5c 01       	movw	r10, r24
     f02:	b6 01       	movw	r22, r12
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__floatunsisf>
     f0c:	a5 01       	movw	r20, r10
     f0e:	94 01       	movw	r18, r8
     f10:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     f14:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
						OCR1B = OCR1Bvaluepci1;						
     f18:	86 2f       	mov	r24, r22
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     f20:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
						break;
     f24:	7b c0       	rjmp	.+246    	; 0x101c <__stack+0x71d>
					case phasecorrectocramode:
						TCCR1A |= (1<<WGM11)|(1<<WGM10);
     f26:	e0 e8       	ldi	r30, 0x80	; 128
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	83 60       	ori	r24, 0x03	; 3
     f2e:	80 83       	st	Z, r24
						TCCR1B |= (1<<WGM13);
     f30:	e1 e8       	ldi	r30, 0x81	; 129
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	80 61       	ori	r24, 0x10	; 16
     f38:	80 83       	st	Z, r24
						OCR1A = max;
     f3a:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     f3e:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
						uint8_t OCR1Bvaluepco1 = (max*(dutycycle/100));
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	48 ec       	ldi	r20, 0xC8	; 200
     f48:	52 e4       	ldi	r21, 0x42	; 66
     f4a:	c5 01       	movw	r24, r10
     f4c:	b4 01       	movw	r22, r8
     f4e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     f52:	4b 01       	movw	r8, r22
     f54:	5c 01       	movw	r10, r24
     f56:	b6 01       	movw	r22, r12
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__floatunsisf>
     f60:	a5 01       	movw	r20, r10
     f62:	94 01       	movw	r18, r8
     f64:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     f68:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
						OCR1B = OCR1Bvaluepco1;						
     f6c:	86 2f       	mov	r24, r22
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     f74:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
						break;
     f78:	51 c0       	rjmp	.+162    	; 0x101c <__stack+0x71d>
					case fasticrmode:
						TCCR1A |= (1<<WGM11);
     f7a:	e0 e8       	ldi	r30, 0x80	; 128
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	82 60       	ori	r24, 0x02	; 2
     f82:	80 83       	st	Z, r24
						TCCR1B |= (1<<WGM13)|(1<<WGM12);
     f84:	e1 e8       	ldi	r30, 0x81	; 129
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	88 61       	ori	r24, 0x18	; 24
     f8c:	80 83       	st	Z, r24
						ICR1 = max;
     f8e:	d0 92 87 00 	sts	0x0087, r13	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     f92:	c0 92 86 00 	sts	0x0086, r12	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
						maxfromdutycycle1 = ((max*dutycycle)/100);
     f96:	b6 01       	movw	r22, r12
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__floatunsisf>
     fa0:	a5 01       	movw	r20, r10
     fa2:	94 01       	movw	r18, r8
     fa4:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	48 ec       	ldi	r20, 0xC8	; 200
     fae:	52 e4       	ldi	r21, 0x42	; 66
     fb0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     fb4:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     fb8:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <maxfromdutycycle1+0x1>
     fbc:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <maxfromdutycycle1>
						OCR1B = maxfromdutycycle1;
     fc0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     fc4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
						break;
     fc8:	29 c0       	rjmp	.+82     	; 0x101c <__stack+0x71d>
					case fastocramode:
						TCCR1A |= (1<<WGM11)|(1<<WGM10);
     fca:	e0 e8       	ldi	r30, 0x80	; 128
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	83 60       	ori	r24, 0x03	; 3
     fd2:	80 83       	st	Z, r24
						TCCR1B |= (1<<WGM13)|(1<<WGM12);
     fd4:	e1 e8       	ldi	r30, 0x81	; 129
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	88 61       	ori	r24, 0x18	; 24
     fdc:	80 83       	st	Z, r24
						OCR1A = max;
     fde:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     fe2:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
						uint8_t OCR1Bvalue = (max*(dutycycle/100));
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	48 ec       	ldi	r20, 0xC8	; 200
     fec:	52 e4       	ldi	r21, 0x42	; 66
     fee:	c5 01       	movw	r24, r10
     ff0:	b4 01       	movw	r22, r8
     ff2:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
     ff6:	4b 01       	movw	r8, r22
     ff8:	5c 01       	movw	r10, r24
     ffa:	b6 01       	movw	r22, r12
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__floatunsisf>
    1004:	a5 01       	movw	r20, r10
    1006:	94 01       	movw	r18, r8
    1008:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    100c:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
						OCR1B = OCR1Bvalue;
    1010:	86 2f       	mov	r24, r22
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1018:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
						break;
					default:
						break;
				}
				if((enableinterrupt!=0)&&(enableinterrupt!=3)){
    101c:	ee 20       	and	r14, r14
    101e:	49 f0       	breq	.+18     	; 0x1032 <__stack+0x733>
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	e8 16       	cp	r14, r24
    1024:	31 f0       	breq	.+12     	; 0x1032 <__stack+0x733>
					TIMSK1 |= enableinterrupt;												//Enable timer interrupts
    1026:	ef e6       	ldi	r30, 0x6F	; 111
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	e8 2a       	or	r14, r24
    102e:	e0 82       	st	Z, r14
    1030:	b4 c0       	rjmp	.+360    	; 0x119a <__stack+0x89b>
				}else if(enableinterrupt==3){
    1032:	93 e0       	ldi	r25, 0x03	; 3
    1034:	e9 12       	cpse	r14, r25
    1036:	b1 c0       	rjmp	.+354    	; 0x119a <__stack+0x89b>
					TIMSK1 |= (1<<ICIE1);													//Input Capture Interrupt
    1038:	ef e6       	ldi	r30, 0x6F	; 111
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 62       	ori	r24, 0x20	; 32
    1040:	80 83       	st	Z, r24
    1042:	ab c0       	rjmp	.+342    	; 0x119a <__stack+0x89b>
				}
				break;
			case OC2A:
				DDRB |= (1<<DDB3);												//Set PINB3 as output > OC2A
    1044:	84 b1       	in	r24, 0x04	; 4
    1046:	88 60       	ori	r24, 0x08	; 8
    1048:	84 b9       	out	0x04, r24	; 4
				TCCR2A |= (sel_inverted==inverted)?((1<<COM2A1)|(1<<COM2A0)):(1<<COM2A1);	//Inverted or non-inverted signal
    104a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    104e:	d1 30       	cpi	r29, 0x01	; 1
    1050:	11 f4       	brne	.+4      	; 0x1056 <__stack+0x757>
    1052:	90 ec       	ldi	r25, 0xC0	; 192
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <__stack+0x759>
    1056:	90 e8       	ldi	r25, 0x80	; 128
    1058:	89 2b       	or	r24, r25
    105a:	e0 eb       	ldi	r30, 0xB0	; 176
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 83       	st	Z, r24
				TCCR2A |= (pwmtype==fastmode)?((1<<WGM21)|(1<<WGM20)):(1<<WGM20);			//Fast PWM Mode or Phase Correct PWM Mode
    1060:	80 81       	ld	r24, Z
    1062:	12 30       	cpi	r17, 0x02	; 2
    1064:	11 f4       	brne	.+4      	; 0x106a <__stack+0x76b>
    1066:	93 e0       	ldi	r25, 0x03	; 3
    1068:	01 c0       	rjmp	.+2      	; 0x106c <__stack+0x76d>
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	89 2b       	or	r24, r25
    106e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				if(((max!=until_top)||(max!=0xFF))&&(max<0xFF)){
    1072:	8f ef       	ldi	r24, 0xFF	; 255
    1074:	c8 16       	cp	r12, r24
    1076:	d1 04       	cpc	r13, r1
    1078:	40 f4       	brcc	.+16     	; 0x108a <__stack+0x78b>
					TCCR2B |= (1<<WGM22);													//Top on OCRA
    107a:	e1 eb       	ldi	r30, 0xB1	; 177
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	88 60       	ori	r24, 0x08	; 8
    1082:	80 83       	st	Z, r24
					OCR2A = max;
    1084:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    1088:	18 c0       	rjmp	.+48     	; 0x10ba <__stack+0x7bb>
				}else if(max==0xFF){
    108a:	9f ef       	ldi	r25, 0xFF	; 255
    108c:	c9 16       	cp	r12, r25
    108e:	d1 04       	cpc	r13, r1
    1090:	a1 f4       	brne	.+40     	; 0x10ba <__stack+0x7bb>
					maxfromdutycycle = ((0xFF)*(dutycycle/100));
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	48 ec       	ldi	r20, 0xC8	; 200
    1098:	52 e4       	ldi	r21, 0x42	; 66
    109a:	c5 01       	movw	r24, r10
    109c:	b4 01       	movw	r22, r8
    109e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	4f e7       	ldi	r20, 0x7F	; 127
    10a8:	53 e4       	ldi	r21, 0x43	; 67
    10aa:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    10ae:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    10b2:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <maxfromdutycycle>
					OCR2A = maxfromdutycycle;
    10b6:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				}
				if((enableinterrupt!=0)&&(enableinterrupt!=3)){
    10ba:	ee 20       	and	r14, r14
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <__stack+0x7c1>
    10be:	6d c0       	rjmp	.+218    	; 0x119a <__stack+0x89b>
    10c0:	83 e0       	ldi	r24, 0x03	; 3
    10c2:	e8 16       	cp	r14, r24
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <__stack+0x7c9>
    10c6:	69 c0       	rjmp	.+210    	; 0x119a <__stack+0x89b>
					TIMSK2 |= enableinterrupt;												//Enable timer interrupts
    10c8:	e0 e7       	ldi	r30, 0x70	; 112
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	e8 2a       	or	r14, r24
    10d0:	e0 82       	st	Z, r14
    10d2:	63 c0       	rjmp	.+198    	; 0x119a <__stack+0x89b>
				}
				break;
			case OC2B:
				DDRD |= (1<<DDD3);															//Set PIND3 as output > OC2B
    10d4:	8a b1       	in	r24, 0x0a	; 10
    10d6:	88 60       	ori	r24, 0x08	; 8
    10d8:	8a b9       	out	0x0a, r24	; 10
				TCCR2A |= (sel_inverted==inverted)?((1<<COM2A1)|(1<<COM2A0)):(1<<COM2A1);	//Inverted or non-inverted signal
    10da:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    10de:	d1 30       	cpi	r29, 0x01	; 1
    10e0:	11 f4       	brne	.+4      	; 0x10e6 <__stack+0x7e7>
    10e2:	90 ec       	ldi	r25, 0xC0	; 192
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <__stack+0x7e9>
    10e6:	90 e8       	ldi	r25, 0x80	; 128
    10e8:	89 2b       	or	r24, r25
    10ea:	e0 eb       	ldi	r30, 0xB0	; 176
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 83       	st	Z, r24
				TCCR2A |= (pwmtype==fastmode)?((1<<WGM21)|(1<<WGM20)):(1<<WGM20);			//Fast PWM Mode or Phase Correct PWM Mode
    10f0:	80 81       	ld	r24, Z
    10f2:	12 30       	cpi	r17, 0x02	; 2
    10f4:	11 f4       	brne	.+4      	; 0x10fa <__stack+0x7fb>
    10f6:	93 e0       	ldi	r25, 0x03	; 3
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <__stack+0x7fd>
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	89 2b       	or	r24, r25
    10fe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				TCCR2B = (prescaler<=7)?(prescaler):(0x00);									//Prescaler selected
    1102:	08 30       	cpi	r16, 0x08	; 8
    1104:	08 f0       	brcs	.+2      	; 0x1108 <__stack+0x809>
    1106:	00 e0       	ldi	r16, 0x00	; 0
    1108:	00 93 b1 00 	sts	0x00B1, r16	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
				if(((max!=until_top)||(max!=0xFF))&&(max<0xFF)){
    110c:	9f ef       	ldi	r25, 0xFF	; 255
    110e:	c9 16       	cp	r12, r25
    1110:	d1 04       	cpc	r13, r1
    1112:	08 f5       	brcc	.+66     	; 0x1156 <__stack+0x857>
					TCCR2B |= (1<<WGM22);													//Top on OCRB
    1114:	e1 eb       	ldi	r30, 0xB1	; 177
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	88 60       	ori	r24, 0x08	; 8
    111c:	80 83       	st	Z, r24
					OCR2A = max;
    111e:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
					maxfromdutycycle = (max*(dutycycle/100));
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	48 ec       	ldi	r20, 0xC8	; 200
    1128:	52 e4       	ldi	r21, 0x42	; 66
    112a:	c5 01       	movw	r24, r10
    112c:	b4 01       	movw	r22, r8
    112e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    1132:	4b 01       	movw	r8, r22
    1134:	5c 01       	movw	r10, r24
    1136:	b6 01       	movw	r22, r12
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__floatunsisf>
    1140:	a5 01       	movw	r20, r10
    1142:	94 01       	movw	r18, r8
    1144:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    1148:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    114c:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <maxfromdutycycle>
					OCR2B = maxfromdutycycle;
    1150:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1154:	18 c0       	rjmp	.+48     	; 0x1186 <__stack+0x887>
				} else if(max<0xFF){
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    1158:	c8 16       	cp	r12, r24
    115a:	d1 04       	cpc	r13, r1
    115c:	a0 f4       	brcc	.+40     	; 0x1186 <__stack+0x887>
					maxfromdutycycle = ((0xFF)*(dutycycle/100));
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	48 ec       	ldi	r20, 0xC8	; 200
    1164:	52 e4       	ldi	r21, 0x42	; 66
    1166:	c5 01       	movw	r24, r10
    1168:	b4 01       	movw	r22, r8
    116a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	4f e7       	ldi	r20, 0x7F	; 127
    1174:	53 e4       	ldi	r21, 0x43	; 67
    1176:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    117a:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    117e:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <maxfromdutycycle>
					OCR2B = maxfromdutycycle;
    1182:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				}
				if((enableinterrupt!=0)&&(enableinterrupt!=3))	{
    1186:	ee 20       	and	r14, r14
    1188:	41 f0       	breq	.+16     	; 0x119a <__stack+0x89b>
    118a:	93 e0       	ldi	r25, 0x03	; 3
    118c:	e9 16       	cp	r14, r25
    118e:	29 f0       	breq	.+10     	; 0x119a <__stack+0x89b>
					TIMSK0 |= enableinterrupt;												//Enable timer interrupts
    1190:	ee e6       	ldi	r30, 0x6E	; 110
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	e8 2a       	or	r14, r24
    1198:	e0 82       	st	Z, r14
				break;
			default:
				break;
		}	
	}
}
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ef 90       	pop	r14
    11a4:	df 90       	pop	r13
    11a6:	cf 90       	pop	r12
    11a8:	bf 90       	pop	r11
    11aa:	af 90       	pop	r10
    11ac:	9f 90       	pop	r9
    11ae:	8f 90       	pop	r8
    11b0:	08 95       	ret

000011b2 <updatedutycycle>:

void updatedutycycle(uint8_t sel_output, float dutycycle){
    11b2:	cf 92       	push	r12
    11b4:	df 92       	push	r13
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	6a 01       	movw	r12, r20
    11c0:	7b 01       	movw	r14, r22
	switch(sel_output){
    11c2:	83 30       	cpi	r24, 0x03	; 3
    11c4:	71 f1       	breq	.+92     	; 0x1222 <updatedutycycle+0x70>
    11c6:	28 f4       	brcc	.+10     	; 0x11d2 <updatedutycycle+0x20>
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	61 f0       	breq	.+24     	; 0x11e4 <updatedutycycle+0x32>
    11cc:	82 30       	cpi	r24, 0x02	; 2
    11ce:	91 f0       	breq	.+36     	; 0x11f4 <updatedutycycle+0x42>
    11d0:	be c2       	rjmp	.+1404   	; 0x174e <updatedutycycle+0x59c>
    11d2:	85 30       	cpi	r24, 0x05	; 5
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <updatedutycycle+0x26>
    11d6:	7f c2       	rjmp	.+1278   	; 0x16d6 <updatedutycycle+0x524>
    11d8:	08 f4       	brcc	.+2      	; 0x11dc <updatedutycycle+0x2a>
    11da:	22 c1       	rjmp	.+580    	; 0x1420 <updatedutycycle+0x26e>
    11dc:	86 30       	cpi	r24, 0x06	; 6
    11de:	09 f4       	brne	.+2      	; 0x11e2 <updatedutycycle+0x30>
    11e0:	84 c2       	rjmp	.+1288   	; 0x16ea <updatedutycycle+0x538>
    11e2:	b5 c2       	rjmp	.+1386   	; 0x174e <updatedutycycle+0x59c>
		case OC0A:
			DDRD |= (1<<DDD6);															//Set PIND6 as output > OC0A
    11e4:	8a b1       	in	r24, 0x0a	; 10
    11e6:	80 64       	ori	r24, 0x40	; 64
    11e8:	8a b9       	out	0x0a, r24	; 10
			if(((TCCR0B&(1<WGM02))==0)&&((TCCR0A&(1<WGM00))==1)){
    11ea:	05 b4       	in	r0, 0x25	; 37
    11ec:	00 fc       	sbrc	r0, 0
    11ee:	af c2       	rjmp	.+1374   	; 0x174e <updatedutycycle+0x59c>
    11f0:	84 b5       	in	r24, 0x24	; 36
    11f2:	ad c2       	rjmp	.+1370   	; 0x174e <updatedutycycle+0x59c>
				maxfromdutycycle = ((0xFF*dutycycle)/100);
				OCR0A = maxfromdutycycle;
			}
			break;
		case OC0B:
			DDRD |= (1<<DDD5);															//Set PIND5 as output > OC0B
    11f4:	8a b1       	in	r24, 0x0a	; 10
    11f6:	80 62       	ori	r24, 0x20	; 32
    11f8:	8a b9       	out	0x0a, r24	; 10
			maxfromdutycycle = ((0xFF*dutycycle)/100);
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	4f e7       	ldi	r20, 0x7F	; 127
    1200:	53 e4       	ldi	r21, 0x43	; 67
    1202:	c7 01       	movw	r24, r14
    1204:	b6 01       	movw	r22, r12
    1206:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	48 ec       	ldi	r20, 0xC8	; 200
    1210:	52 e4       	ldi	r21, 0x42	; 66
    1212:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    1216:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    121a:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <maxfromdutycycle>
			OCR0B = maxfromdutycycle;
    121e:	68 bd       	out	0x28, r22	; 40
			break;
    1220:	96 c2       	rjmp	.+1324   	; 0x174e <updatedutycycle+0x59c>
		case OC1A:
			DDRB |= (1<<DDB1);															//Set PINB1 as output > OC1A
    1222:	84 b1       	in	r24, 0x04	; 4
    1224:	82 60       	ori	r24, 0x02	; 2
    1226:	84 b9       	out	0x04, r24	; 4
			if(((TCCR1B&((1<<WGM13)|(1<<WGM12)))==0)&&((TCCR1A&0x03)>0)){
    1228:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    122c:	88 71       	andi	r24, 0x18	; 24
    122e:	09 f0       	breq	.+2      	; 0x1232 <updatedutycycle+0x80>
    1230:	52 c0       	rjmp	.+164    	; 0x12d6 <updatedutycycle+0x124>
    1232:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1236:	83 70       	andi	r24, 0x03	; 3
    1238:	09 f4       	brne	.+2      	; 0x123c <updatedutycycle+0x8a>
    123a:	4d c0       	rjmp	.+154    	; 0x12d6 <updatedutycycle+0x124>
				maxfromdutycycle1 = ((TCCR1A&0x03)==1)?((0xFF)*(dutycycle/100)):(((TCCR1A&0x03)==2)?((0x1FF)*(dutycycle/100)):(((TCCR1A&0x03)==3)?((0x3FF)*(dutycycle/100)):0));
    123c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1240:	83 70       	andi	r24, 0x03	; 3
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	89 f4       	brne	.+34     	; 0x1268 <updatedutycycle+0xb6>
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	48 ec       	ldi	r20, 0xC8	; 200
    124c:	52 e4       	ldi	r21, 0x42	; 66
    124e:	c7 01       	movw	r24, r14
    1250:	b6 01       	movw	r22, r12
    1252:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	4f e7       	ldi	r20, 0x7F	; 127
    125c:	53 e4       	ldi	r21, 0x43	; 67
    125e:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    1262:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    1266:	2e c0       	rjmp	.+92     	; 0x12c4 <updatedutycycle+0x112>
    1268:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    126c:	83 70       	andi	r24, 0x03	; 3
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	89 f4       	brne	.+34     	; 0x1294 <updatedutycycle+0xe2>
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	48 ec       	ldi	r20, 0xC8	; 200
    1278:	52 e4       	ldi	r21, 0x42	; 66
    127a:	c7 01       	movw	r24, r14
    127c:	b6 01       	movw	r22, r12
    127e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e8       	ldi	r19, 0x80	; 128
    1286:	4f ef       	ldi	r20, 0xFF	; 255
    1288:	53 e4       	ldi	r21, 0x43	; 67
    128a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    128e:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    1292:	18 c0       	rjmp	.+48     	; 0x12c4 <updatedutycycle+0x112>
    1294:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1298:	83 70       	andi	r24, 0x03	; 3
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	89 f4       	brne	.+34     	; 0x12c0 <updatedutycycle+0x10e>
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	48 ec       	ldi	r20, 0xC8	; 200
    12a4:	52 e4       	ldi	r21, 0x42	; 66
    12a6:	c7 01       	movw	r24, r14
    12a8:	b6 01       	movw	r22, r12
    12aa:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 ec       	ldi	r19, 0xC0	; 192
    12b2:	4f e7       	ldi	r20, 0x7F	; 127
    12b4:	54 e4       	ldi	r21, 0x44	; 68
    12b6:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    12ba:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <updatedutycycle+0x112>
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <maxfromdutycycle1+0x1>
    12c8:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <maxfromdutycycle1>
				OCR1A = maxfromdutycycle1;
    12cc:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    12d0:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    12d4:	3c c2       	rjmp	.+1144   	; 0x174e <updatedutycycle+0x59c>
			}else if(((TCCR1B&(1<<WGM13))==0)&&((TCCR1A&0x03)>0)){
    12d6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    12da:	84 fd       	sbrc	r24, 4
    12dc:	52 c0       	rjmp	.+164    	; 0x1382 <updatedutycycle+0x1d0>
    12de:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    12e2:	83 70       	andi	r24, 0x03	; 3
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <updatedutycycle+0x136>
    12e6:	4d c0       	rjmp	.+154    	; 0x1382 <updatedutycycle+0x1d0>
				maxfromdutycycle1 = ((TCCR1A&0x03)==1)?((0xFF)*(dutycycle/100)):(((TCCR1A&0x03)==2)?((0x1FF)*(dutycycle/100)):(((TCCR1A&0x03)==3)?((0x3FF)*(dutycycle/100)):0));
    12e8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    12ec:	83 70       	andi	r24, 0x03	; 3
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	89 f4       	brne	.+34     	; 0x1314 <updatedutycycle+0x162>
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	48 ec       	ldi	r20, 0xC8	; 200
    12f8:	52 e4       	ldi	r21, 0x42	; 66
    12fa:	c7 01       	movw	r24, r14
    12fc:	b6 01       	movw	r22, r12
    12fe:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	4f e7       	ldi	r20, 0x7F	; 127
    1308:	53 e4       	ldi	r21, 0x43	; 67
    130a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    130e:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    1312:	2e c0       	rjmp	.+92     	; 0x1370 <updatedutycycle+0x1be>
    1314:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1318:	83 70       	andi	r24, 0x03	; 3
    131a:	82 30       	cpi	r24, 0x02	; 2
    131c:	89 f4       	brne	.+34     	; 0x1340 <updatedutycycle+0x18e>
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	48 ec       	ldi	r20, 0xC8	; 200
    1324:	52 e4       	ldi	r21, 0x42	; 66
    1326:	c7 01       	movw	r24, r14
    1328:	b6 01       	movw	r22, r12
    132a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e8       	ldi	r19, 0x80	; 128
    1332:	4f ef       	ldi	r20, 0xFF	; 255
    1334:	53 e4       	ldi	r21, 0x43	; 67
    1336:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    133a:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    133e:	18 c0       	rjmp	.+48     	; 0x1370 <updatedutycycle+0x1be>
    1340:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1344:	83 70       	andi	r24, 0x03	; 3
    1346:	83 30       	cpi	r24, 0x03	; 3
    1348:	89 f4       	brne	.+34     	; 0x136c <updatedutycycle+0x1ba>
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	48 ec       	ldi	r20, 0xC8	; 200
    1350:	52 e4       	ldi	r21, 0x42	; 66
    1352:	c7 01       	movw	r24, r14
    1354:	b6 01       	movw	r22, r12
    1356:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 ec       	ldi	r19, 0xC0	; 192
    135e:	4f e7       	ldi	r20, 0x7F	; 127
    1360:	54 e4       	ldi	r21, 0x44	; 68
    1362:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    1366:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <updatedutycycle+0x1be>
    136c:	60 e0       	ldi	r22, 0x00	; 0
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <maxfromdutycycle1+0x1>
    1374:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <maxfromdutycycle1>
				OCR1A = maxfromdutycycle1;
    1378:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    137c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1380:	e6 c1       	rjmp	.+972    	; 0x174e <updatedutycycle+0x59c>
			}else if(((TCCR1B&(1<<WGM13))==(1<<WGM13))&&((TCCR1A&0x03)==2)){
    1382:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1386:	84 ff       	sbrs	r24, 4
    1388:	22 c0       	rjmp	.+68     	; 0x13ce <updatedutycycle+0x21c>
    138a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    138e:	83 70       	andi	r24, 0x03	; 3
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	e9 f4       	brne	.+58     	; 0x13ce <updatedutycycle+0x21c>
				maxfromdutycycle1 = ((ICR1*dutycycle)/100);
    1394:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    1398:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__floatunsisf>
    13a4:	a7 01       	movw	r20, r14
    13a6:	96 01       	movw	r18, r12
    13a8:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	48 ec       	ldi	r20, 0xC8	; 200
    13b2:	52 e4       	ldi	r21, 0x42	; 66
    13b4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    13b8:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    13bc:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <maxfromdutycycle1+0x1>
    13c0:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <maxfromdutycycle1>
				OCR1A = maxfromdutycycle1;	
    13c4:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    13c8:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    13cc:	c0 c1       	rjmp	.+896    	; 0x174e <updatedutycycle+0x59c>
			}else if(((TCCR1B&((1<<WGM13)|(1<<WGM12)))==((1<<WGM13)|(1<<WGM12)))&&((TCCR1A&0x03)==2)){
    13ce:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    13d2:	88 71       	andi	r24, 0x18	; 24
    13d4:	88 31       	cpi	r24, 0x18	; 24
    13d6:	09 f0       	breq	.+2      	; 0x13da <updatedutycycle+0x228>
    13d8:	ba c1       	rjmp	.+884    	; 0x174e <updatedutycycle+0x59c>
    13da:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    13de:	83 70       	andi	r24, 0x03	; 3
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <updatedutycycle+0x234>
    13e4:	b4 c1       	rjmp	.+872    	; 0x174e <updatedutycycle+0x59c>
				maxfromdutycycle1 = ((ICR1*dutycycle)/100);
    13e6:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    13ea:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__floatunsisf>
    13f6:	a7 01       	movw	r20, r14
    13f8:	96 01       	movw	r18, r12
    13fa:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	48 ec       	ldi	r20, 0xC8	; 200
    1404:	52 e4       	ldi	r21, 0x42	; 66
    1406:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    140a:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    140e:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <maxfromdutycycle1+0x1>
    1412:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <maxfromdutycycle1>
				OCR1A = maxfromdutycycle1;
    1416:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    141a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    141e:	97 c1       	rjmp	.+814    	; 0x174e <updatedutycycle+0x59c>
			}break;
		case OC1B:
			DDRB |= (1<<DDB2);															//Set PINB2 as output > OC1B
    1420:	84 b1       	in	r24, 0x04	; 4
    1422:	84 60       	ori	r24, 0x04	; 4
    1424:	84 b9       	out	0x04, r24	; 4
			if(((TCCR1B&((1<<WGM13)|(1<<WGM12)))==0)&&((TCCR1A&0x03)>0)){
    1426:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    142a:	88 71       	andi	r24, 0x18	; 24
    142c:	09 f0       	breq	.+2      	; 0x1430 <updatedutycycle+0x27e>
    142e:	52 c0       	rjmp	.+164    	; 0x14d4 <updatedutycycle+0x322>
    1430:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1434:	83 70       	andi	r24, 0x03	; 3
    1436:	09 f4       	brne	.+2      	; 0x143a <updatedutycycle+0x288>
    1438:	4d c0       	rjmp	.+154    	; 0x14d4 <updatedutycycle+0x322>
				maxfromdutycycle1 = ((TCCR1A&0x03)==1)?((0xFF)*(dutycycle/100)):(((TCCR1A&0x03)==2)?((0x1FF)*(dutycycle/100)):(((TCCR1A&0x03)==3)?((0x3FF)*(dutycycle/100)):0));
    143a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    143e:	83 70       	andi	r24, 0x03	; 3
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	89 f4       	brne	.+34     	; 0x1466 <updatedutycycle+0x2b4>
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	48 ec       	ldi	r20, 0xC8	; 200
    144a:	52 e4       	ldi	r21, 0x42	; 66
    144c:	c7 01       	movw	r24, r14
    144e:	b6 01       	movw	r22, r12
    1450:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	53 e4       	ldi	r21, 0x43	; 67
    145c:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    1460:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    1464:	2e c0       	rjmp	.+92     	; 0x14c2 <updatedutycycle+0x310>
    1466:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    146a:	83 70       	andi	r24, 0x03	; 3
    146c:	82 30       	cpi	r24, 0x02	; 2
    146e:	89 f4       	brne	.+34     	; 0x1492 <updatedutycycle+0x2e0>
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	48 ec       	ldi	r20, 0xC8	; 200
    1476:	52 e4       	ldi	r21, 0x42	; 66
    1478:	c7 01       	movw	r24, r14
    147a:	b6 01       	movw	r22, r12
    147c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e8       	ldi	r19, 0x80	; 128
    1484:	4f ef       	ldi	r20, 0xFF	; 255
    1486:	53 e4       	ldi	r21, 0x43	; 67
    1488:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    148c:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    1490:	18 c0       	rjmp	.+48     	; 0x14c2 <updatedutycycle+0x310>
    1492:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1496:	83 70       	andi	r24, 0x03	; 3
    1498:	83 30       	cpi	r24, 0x03	; 3
    149a:	89 f4       	brne	.+34     	; 0x14be <updatedutycycle+0x30c>
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	48 ec       	ldi	r20, 0xC8	; 200
    14a2:	52 e4       	ldi	r21, 0x42	; 66
    14a4:	c7 01       	movw	r24, r14
    14a6:	b6 01       	movw	r22, r12
    14a8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 ec       	ldi	r19, 0xC0	; 192
    14b0:	4f e7       	ldi	r20, 0x7F	; 127
    14b2:	54 e4       	ldi	r21, 0x44	; 68
    14b4:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    14b8:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <updatedutycycle+0x310>
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <maxfromdutycycle1+0x1>
    14c6:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <maxfromdutycycle1>
				OCR1B = maxfromdutycycle1;
    14ca:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    14ce:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    14d2:	3d c1       	rjmp	.+634    	; 0x174e <updatedutycycle+0x59c>
			}else if(((TCCR1B&(1<<WGM13))==0)&&((TCCR1A&0x03)>0)){
    14d4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    14d8:	84 fd       	sbrc	r24, 4
    14da:	52 c0       	rjmp	.+164    	; 0x1580 <updatedutycycle+0x3ce>
    14dc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    14e0:	83 70       	andi	r24, 0x03	; 3
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <updatedutycycle+0x334>
    14e4:	4d c0       	rjmp	.+154    	; 0x1580 <updatedutycycle+0x3ce>
				maxfromdutycycle1 = ((TCCR1A&0x03)==1)?((0xFF)*(dutycycle/100)):(((TCCR1A&0x03)==2)?((0x1FF)*(dutycycle/100)):(((TCCR1A&0x03)==3)?((0x3FF)*(dutycycle/100)):0));
    14e6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    14ea:	83 70       	andi	r24, 0x03	; 3
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	89 f4       	brne	.+34     	; 0x1512 <updatedutycycle+0x360>
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	48 ec       	ldi	r20, 0xC8	; 200
    14f6:	52 e4       	ldi	r21, 0x42	; 66
    14f8:	c7 01       	movw	r24, r14
    14fa:	b6 01       	movw	r22, r12
    14fc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	4f e7       	ldi	r20, 0x7F	; 127
    1506:	53 e4       	ldi	r21, 0x43	; 67
    1508:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    150c:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    1510:	2e c0       	rjmp	.+92     	; 0x156e <updatedutycycle+0x3bc>
    1512:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1516:	83 70       	andi	r24, 0x03	; 3
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	89 f4       	brne	.+34     	; 0x153e <updatedutycycle+0x38c>
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	48 ec       	ldi	r20, 0xC8	; 200
    1522:	52 e4       	ldi	r21, 0x42	; 66
    1524:	c7 01       	movw	r24, r14
    1526:	b6 01       	movw	r22, r12
    1528:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e8       	ldi	r19, 0x80	; 128
    1530:	4f ef       	ldi	r20, 0xFF	; 255
    1532:	53 e4       	ldi	r21, 0x43	; 67
    1534:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    1538:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    153c:	18 c0       	rjmp	.+48     	; 0x156e <updatedutycycle+0x3bc>
    153e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1542:	83 70       	andi	r24, 0x03	; 3
    1544:	83 30       	cpi	r24, 0x03	; 3
    1546:	89 f4       	brne	.+34     	; 0x156a <updatedutycycle+0x3b8>
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	48 ec       	ldi	r20, 0xC8	; 200
    154e:	52 e4       	ldi	r21, 0x42	; 66
    1550:	c7 01       	movw	r24, r14
    1552:	b6 01       	movw	r22, r12
    1554:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 ec       	ldi	r19, 0xC0	; 192
    155c:	4f e7       	ldi	r20, 0x7F	; 127
    155e:	54 e4       	ldi	r21, 0x44	; 68
    1560:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    1564:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    1568:	02 c0       	rjmp	.+4      	; 0x156e <updatedutycycle+0x3bc>
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <maxfromdutycycle1+0x1>
    1572:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <maxfromdutycycle1>
				OCR1B = maxfromdutycycle1;
    1576:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    157a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    157e:	e7 c0       	rjmp	.+462    	; 0x174e <updatedutycycle+0x59c>
			}else if(((TCCR1B&(1<<WGM13))==(1<<WGM13))&&((TCCR1A&0x03)==2)){
    1580:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1584:	84 ff       	sbrs	r24, 4
    1586:	27 c0       	rjmp	.+78     	; 0x15d6 <updatedutycycle+0x424>
    1588:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    158c:	83 70       	andi	r24, 0x03	; 3
    158e:	82 30       	cpi	r24, 0x02	; 2
    1590:	11 f5       	brne	.+68     	; 0x15d6 <updatedutycycle+0x424>
				maxfromdutycycle1 = (ICR1*(dutycycle/100));
    1592:	c0 91 86 00 	lds	r28, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    1596:	d0 91 87 00 	lds	r29, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	48 ec       	ldi	r20, 0xC8	; 200
    15a0:	52 e4       	ldi	r21, 0x42	; 66
    15a2:	c7 01       	movw	r24, r14
    15a4:	b6 01       	movw	r22, r12
    15a6:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    15aa:	6b 01       	movw	r12, r22
    15ac:	7c 01       	movw	r14, r24
    15ae:	be 01       	movw	r22, r28
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__floatunsisf>
    15b8:	a7 01       	movw	r20, r14
    15ba:	96 01       	movw	r18, r12
    15bc:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    15c0:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    15c4:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <maxfromdutycycle1+0x1>
    15c8:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <maxfromdutycycle1>
				OCR1B = maxfromdutycycle1;
    15cc:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    15d0:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    15d4:	bc c0       	rjmp	.+376    	; 0x174e <updatedutycycle+0x59c>
			}else if(((TCCR1B&(1<<WGM13))==(1<<WGM13))&&((TCCR1A&0x03)==3)){
    15d6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    15da:	84 ff       	sbrs	r24, 4
    15dc:	27 c0       	rjmp	.+78     	; 0x162c <updatedutycycle+0x47a>
    15de:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    15e2:	83 70       	andi	r24, 0x03	; 3
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	11 f5       	brne	.+68     	; 0x162c <updatedutycycle+0x47a>
				maxfromdutycycle1= (OCR1A*(dutycycle/100));
    15e8:	c0 91 88 00 	lds	r28, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    15ec:	d0 91 89 00 	lds	r29, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	48 ec       	ldi	r20, 0xC8	; 200
    15f6:	52 e4       	ldi	r21, 0x42	; 66
    15f8:	c7 01       	movw	r24, r14
    15fa:	b6 01       	movw	r22, r12
    15fc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    1600:	6b 01       	movw	r12, r22
    1602:	7c 01       	movw	r14, r24
    1604:	be 01       	movw	r22, r28
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__floatunsisf>
    160e:	a7 01       	movw	r20, r14
    1610:	96 01       	movw	r18, r12
    1612:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    1616:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    161a:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <maxfromdutycycle1+0x1>
    161e:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <maxfromdutycycle1>
				OCR1B = maxfromdutycycle1;
    1622:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1626:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    162a:	91 c0       	rjmp	.+290    	; 0x174e <updatedutycycle+0x59c>
			}else if(((TCCR1B&((1<<WGM13)|(1<<WGM12)))==((1<<WGM13)|(1<<WGM12)))&&((TCCR1A&0x03)==2)){
    162c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1630:	88 71       	andi	r24, 0x18	; 24
    1632:	88 31       	cpi	r24, 0x18	; 24
    1634:	11 f5       	brne	.+68     	; 0x167a <updatedutycycle+0x4c8>
    1636:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    163a:	83 70       	andi	r24, 0x03	; 3
    163c:	82 30       	cpi	r24, 0x02	; 2
    163e:	e9 f4       	brne	.+58     	; 0x167a <updatedutycycle+0x4c8>
				maxfromdutycycle1 = ((ICR1*dutycycle)/100);
    1640:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    1644:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__floatunsisf>
    1650:	a7 01       	movw	r20, r14
    1652:	96 01       	movw	r18, r12
    1654:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	48 ec       	ldi	r20, 0xC8	; 200
    165e:	52 e4       	ldi	r21, 0x42	; 66
    1660:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    1664:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    1668:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <maxfromdutycycle1+0x1>
    166c:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <maxfromdutycycle1>
				OCR1B = maxfromdutycycle1;
    1670:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1674:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1678:	6a c0       	rjmp	.+212    	; 0x174e <updatedutycycle+0x59c>
			}else if(((TCCR1B&((1<<WGM13)|(1<<WGM12)))==((1<<WGM13)|(1<<WGM12)))&&((TCCR1A&0x03)==3)){
    167a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    167e:	88 71       	andi	r24, 0x18	; 24
    1680:	88 31       	cpi	r24, 0x18	; 24
    1682:	09 f0       	breq	.+2      	; 0x1686 <updatedutycycle+0x4d4>
    1684:	64 c0       	rjmp	.+200    	; 0x174e <updatedutycycle+0x59c>
    1686:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    168a:	83 70       	andi	r24, 0x03	; 3
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	09 f0       	breq	.+2      	; 0x1692 <updatedutycycle+0x4e0>
    1690:	5e c0       	rjmp	.+188    	; 0x174e <updatedutycycle+0x59c>
				maxfromdutycycle1 = (OCR1A*(dutycycle/100));
    1692:	c0 91 88 00 	lds	r28, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1696:	d0 91 89 00 	lds	r29, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	48 ec       	ldi	r20, 0xC8	; 200
    16a0:	52 e4       	ldi	r21, 0x42	; 66
    16a2:	c7 01       	movw	r24, r14
    16a4:	b6 01       	movw	r22, r12
    16a6:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    16aa:	6b 01       	movw	r12, r22
    16ac:	7c 01       	movw	r14, r24
    16ae:	be 01       	movw	r22, r28
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__floatunsisf>
    16b8:	a7 01       	movw	r20, r14
    16ba:	96 01       	movw	r18, r12
    16bc:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    16c0:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    16c4:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <maxfromdutycycle1+0x1>
    16c8:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <maxfromdutycycle1>
				OCR1B = maxfromdutycycle1;
    16cc:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    16d0:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    16d4:	3c c0       	rjmp	.+120    	; 0x174e <updatedutycycle+0x59c>
			}break;
		case OC2A:
			DDRB |= (1<<DDB3);												//Set PINB3 as output > OC2A
    16d6:	84 b1       	in	r24, 0x04	; 4
    16d8:	88 60       	ori	r24, 0x08	; 8
    16da:	84 b9       	out	0x04, r24	; 4
			if(((TCCR2B&(1<WGM02))==0)&&((TCCR2A&(1<WGM00))==1)){
    16dc:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    16e0:	80 fd       	sbrc	r24, 0
    16e2:	35 c0       	rjmp	.+106    	; 0x174e <updatedutycycle+0x59c>
    16e4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    16e8:	32 c0       	rjmp	.+100    	; 0x174e <updatedutycycle+0x59c>
				maxfromdutycycle = ((0xFF*dutycycle)/100);
				OCR2A = maxfromdutycycle;
			}break;
		case OC2B:
			DDRD |= (1<<DDD3);												//Set PIND3 as output > OC2B
    16ea:	8a b1       	in	r24, 0x0a	; 10
    16ec:	88 60       	ori	r24, 0x08	; 8
    16ee:	8a b9       	out	0x0a, r24	; 10
			if(OCR2A!=0xFF){
    16f0:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    16f4:	8f 3f       	cpi	r24, 0xFF	; 255
    16f6:	b9 f0       	breq	.+46     	; 0x1726 <updatedutycycle+0x574>
				maxfromdutycycle = ((OCR2A*dutycycle)/100);
    16f8:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
    1706:	a7 01       	movw	r20, r14
    1708:	96 01       	movw	r18, r12
    170a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	48 ec       	ldi	r20, 0xC8	; 200
    1714:	52 e4       	ldi	r21, 0x42	; 66
    1716:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    171a:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    171e:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <maxfromdutycycle>
				OCR0B = maxfromdutycycle;
    1722:	68 bd       	out	0x28, r22	; 40
    1724:	14 c0       	rjmp	.+40     	; 0x174e <updatedutycycle+0x59c>
			} else{
				maxfromdutycycle = ((0xFF*dutycycle)/100);
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	4f e7       	ldi	r20, 0x7F	; 127
    172c:	53 e4       	ldi	r21, 0x43	; 67
    172e:	c7 01       	movw	r24, r14
    1730:	b6 01       	movw	r22, r12
    1732:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3>
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	48 ec       	ldi	r20, 0xC8	; 200
    173c:	52 e4       	ldi	r21, 0x42	; 66
    173e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    1742:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    1746:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <maxfromdutycycle>
				OCR2B = maxfromdutycycle;
    174a:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			}
			break;
		default:
			break;	
		}		
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	cf 90       	pop	r12
    175a:	08 95       	ret

0000175c <initUART09600>:
    175c:	8a b1       	in	r24, 0x0a	; 10
    175e:	8e 7f       	andi	r24, 0xFE	; 254
    1760:	8a b9       	out	0x0a, r24	; 10
    1762:	8a b1       	in	r24, 0x0a	; 10
    1764:	82 60       	ori	r24, 0x02	; 2
    1766:	8a b9       	out	0x0a, r24	; 10
    1768:	e0 ec       	ldi	r30, 0xC0	; 192
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	10 82       	st	Z, r1
    176e:	80 81       	ld	r24, Z
    1770:	82 60       	ori	r24, 0x02	; 2
    1772:	80 83       	st	Z, r24
    1774:	e1 ec       	ldi	r30, 0xC1	; 193
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	10 82       	st	Z, r1
    177a:	80 81       	ld	r24, Z
    177c:	80 68       	ori	r24, 0x80	; 128
    177e:	80 83       	st	Z, r24
    1780:	80 81       	ld	r24, Z
    1782:	80 61       	ori	r24, 0x10	; 16
    1784:	80 83       	st	Z, r24
    1786:	80 81       	ld	r24, Z
    1788:	88 60       	ori	r24, 0x08	; 8
    178a:	80 83       	st	Z, r24
    178c:	e2 ec       	ldi	r30, 0xC2	; 194
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	10 82       	st	Z, r1
    1792:	86 e0       	ldi	r24, 0x06	; 6
    1794:	80 83       	st	Z, r24
    1796:	8f ec       	ldi	r24, 0xCF	; 207
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    179e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    17a2:	08 95       	ret

000017a4 <writeTextUART>:
    17a4:	ac 01       	movw	r20, r24
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	07 c0       	rjmp	.+14     	; 0x17b8 <writeTextUART+0x14>
    17aa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    17ae:	95 ff       	sbrs	r25, 5
    17b0:	fc cf       	rjmp	.-8      	; 0x17aa <writeTextUART+0x6>
    17b2:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    17b6:	2f 5f       	subi	r18, 0xFF	; 255
    17b8:	fa 01       	movw	r30, r20
    17ba:	e2 0f       	add	r30, r18
    17bc:	f1 1d       	adc	r31, r1
    17be:	30 81       	ld	r19, Z
    17c0:	31 11       	cpse	r19, r1
    17c2:	f3 cf       	rjmp	.-26     	; 0x17aa <writeTextUART+0x6>
    17c4:	08 95       	ret

000017c6 <__subsf3>:
    17c6:	50 58       	subi	r21, 0x80	; 128

000017c8 <__addsf3>:
    17c8:	bb 27       	eor	r27, r27
    17ca:	aa 27       	eor	r26, r26
    17cc:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3x>
    17d0:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_round>
    17d4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__fp_pscA>
    17d8:	38 f0       	brcs	.+14     	; 0x17e8 <__addsf3+0x20>
    17da:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__fp_pscB>
    17de:	20 f0       	brcs	.+8      	; 0x17e8 <__addsf3+0x20>
    17e0:	39 f4       	brne	.+14     	; 0x17f0 <__addsf3+0x28>
    17e2:	9f 3f       	cpi	r25, 0xFF	; 255
    17e4:	19 f4       	brne	.+6      	; 0x17ec <__addsf3+0x24>
    17e6:	26 f4       	brtc	.+8      	; 0x17f0 <__addsf3+0x28>
    17e8:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_nan>
    17ec:	0e f4       	brtc	.+2      	; 0x17f0 <__addsf3+0x28>
    17ee:	e0 95       	com	r30
    17f0:	e7 fb       	bst	r30, 7
    17f2:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__fp_inf>

000017f6 <__addsf3x>:
    17f6:	e9 2f       	mov	r30, r25
    17f8:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__fp_split3>
    17fc:	58 f3       	brcs	.-42     	; 0x17d4 <__addsf3+0xc>
    17fe:	ba 17       	cp	r27, r26
    1800:	62 07       	cpc	r22, r18
    1802:	73 07       	cpc	r23, r19
    1804:	84 07       	cpc	r24, r20
    1806:	95 07       	cpc	r25, r21
    1808:	20 f0       	brcs	.+8      	; 0x1812 <__addsf3x+0x1c>
    180a:	79 f4       	brne	.+30     	; 0x182a <__addsf3x+0x34>
    180c:	a6 f5       	brtc	.+104    	; 0x1876 <__addsf3x+0x80>
    180e:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__fp_zero>
    1812:	0e f4       	brtc	.+2      	; 0x1816 <__addsf3x+0x20>
    1814:	e0 95       	com	r30
    1816:	0b 2e       	mov	r0, r27
    1818:	ba 2f       	mov	r27, r26
    181a:	a0 2d       	mov	r26, r0
    181c:	0b 01       	movw	r0, r22
    181e:	b9 01       	movw	r22, r18
    1820:	90 01       	movw	r18, r0
    1822:	0c 01       	movw	r0, r24
    1824:	ca 01       	movw	r24, r20
    1826:	a0 01       	movw	r20, r0
    1828:	11 24       	eor	r1, r1
    182a:	ff 27       	eor	r31, r31
    182c:	59 1b       	sub	r21, r25
    182e:	99 f0       	breq	.+38     	; 0x1856 <__addsf3x+0x60>
    1830:	59 3f       	cpi	r21, 0xF9	; 249
    1832:	50 f4       	brcc	.+20     	; 0x1848 <__addsf3x+0x52>
    1834:	50 3e       	cpi	r21, 0xE0	; 224
    1836:	68 f1       	brcs	.+90     	; 0x1892 <__addsf3x+0x9c>
    1838:	1a 16       	cp	r1, r26
    183a:	f0 40       	sbci	r31, 0x00	; 0
    183c:	a2 2f       	mov	r26, r18
    183e:	23 2f       	mov	r18, r19
    1840:	34 2f       	mov	r19, r20
    1842:	44 27       	eor	r20, r20
    1844:	58 5f       	subi	r21, 0xF8	; 248
    1846:	f3 cf       	rjmp	.-26     	; 0x182e <__addsf3x+0x38>
    1848:	46 95       	lsr	r20
    184a:	37 95       	ror	r19
    184c:	27 95       	ror	r18
    184e:	a7 95       	ror	r26
    1850:	f0 40       	sbci	r31, 0x00	; 0
    1852:	53 95       	inc	r21
    1854:	c9 f7       	brne	.-14     	; 0x1848 <__addsf3x+0x52>
    1856:	7e f4       	brtc	.+30     	; 0x1876 <__addsf3x+0x80>
    1858:	1f 16       	cp	r1, r31
    185a:	ba 0b       	sbc	r27, r26
    185c:	62 0b       	sbc	r22, r18
    185e:	73 0b       	sbc	r23, r19
    1860:	84 0b       	sbc	r24, r20
    1862:	ba f0       	brmi	.+46     	; 0x1892 <__addsf3x+0x9c>
    1864:	91 50       	subi	r25, 0x01	; 1
    1866:	a1 f0       	breq	.+40     	; 0x1890 <__addsf3x+0x9a>
    1868:	ff 0f       	add	r31, r31
    186a:	bb 1f       	adc	r27, r27
    186c:	66 1f       	adc	r22, r22
    186e:	77 1f       	adc	r23, r23
    1870:	88 1f       	adc	r24, r24
    1872:	c2 f7       	brpl	.-16     	; 0x1864 <__addsf3x+0x6e>
    1874:	0e c0       	rjmp	.+28     	; 0x1892 <__addsf3x+0x9c>
    1876:	ba 0f       	add	r27, r26
    1878:	62 1f       	adc	r22, r18
    187a:	73 1f       	adc	r23, r19
    187c:	84 1f       	adc	r24, r20
    187e:	48 f4       	brcc	.+18     	; 0x1892 <__addsf3x+0x9c>
    1880:	87 95       	ror	r24
    1882:	77 95       	ror	r23
    1884:	67 95       	ror	r22
    1886:	b7 95       	ror	r27
    1888:	f7 95       	ror	r31
    188a:	9e 3f       	cpi	r25, 0xFE	; 254
    188c:	08 f0       	brcs	.+2      	; 0x1890 <__addsf3x+0x9a>
    188e:	b0 cf       	rjmp	.-160    	; 0x17f0 <__addsf3+0x28>
    1890:	93 95       	inc	r25
    1892:	88 0f       	add	r24, r24
    1894:	08 f0       	brcs	.+2      	; 0x1898 <__addsf3x+0xa2>
    1896:	99 27       	eor	r25, r25
    1898:	ee 0f       	add	r30, r30
    189a:	97 95       	ror	r25
    189c:	87 95       	ror	r24
    189e:	08 95       	ret

000018a0 <__cmpsf2>:
    18a0:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__fp_cmp>
    18a4:	08 f4       	brcc	.+2      	; 0x18a8 <__cmpsf2+0x8>
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	08 95       	ret

000018aa <__divsf3>:
    18aa:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__divsf3x>
    18ae:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_round>
    18b2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__fp_pscB>
    18b6:	58 f0       	brcs	.+22     	; 0x18ce <__divsf3+0x24>
    18b8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__fp_pscA>
    18bc:	40 f0       	brcs	.+16     	; 0x18ce <__divsf3+0x24>
    18be:	29 f4       	brne	.+10     	; 0x18ca <__divsf3+0x20>
    18c0:	5f 3f       	cpi	r21, 0xFF	; 255
    18c2:	29 f0       	breq	.+10     	; 0x18ce <__divsf3+0x24>
    18c4:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__fp_inf>
    18c8:	51 11       	cpse	r21, r1
    18ca:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_szero>
    18ce:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_nan>

000018d2 <__divsf3x>:
    18d2:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__fp_split3>
    18d6:	68 f3       	brcs	.-38     	; 0x18b2 <__divsf3+0x8>

000018d8 <__divsf3_pse>:
    18d8:	99 23       	and	r25, r25
    18da:	b1 f3       	breq	.-20     	; 0x18c8 <__divsf3+0x1e>
    18dc:	55 23       	and	r21, r21
    18de:	91 f3       	breq	.-28     	; 0x18c4 <__divsf3+0x1a>
    18e0:	95 1b       	sub	r25, r21
    18e2:	55 0b       	sbc	r21, r21
    18e4:	bb 27       	eor	r27, r27
    18e6:	aa 27       	eor	r26, r26
    18e8:	62 17       	cp	r22, r18
    18ea:	73 07       	cpc	r23, r19
    18ec:	84 07       	cpc	r24, r20
    18ee:	38 f0       	brcs	.+14     	; 0x18fe <__divsf3_pse+0x26>
    18f0:	9f 5f       	subi	r25, 0xFF	; 255
    18f2:	5f 4f       	sbci	r21, 0xFF	; 255
    18f4:	22 0f       	add	r18, r18
    18f6:	33 1f       	adc	r19, r19
    18f8:	44 1f       	adc	r20, r20
    18fa:	aa 1f       	adc	r26, r26
    18fc:	a9 f3       	breq	.-22     	; 0x18e8 <__divsf3_pse+0x10>
    18fe:	35 d0       	rcall	.+106    	; 0x196a <__divsf3_pse+0x92>
    1900:	0e 2e       	mov	r0, r30
    1902:	3a f0       	brmi	.+14     	; 0x1912 <__divsf3_pse+0x3a>
    1904:	e0 e8       	ldi	r30, 0x80	; 128
    1906:	32 d0       	rcall	.+100    	; 0x196c <__divsf3_pse+0x94>
    1908:	91 50       	subi	r25, 0x01	; 1
    190a:	50 40       	sbci	r21, 0x00	; 0
    190c:	e6 95       	lsr	r30
    190e:	00 1c       	adc	r0, r0
    1910:	ca f7       	brpl	.-14     	; 0x1904 <__divsf3_pse+0x2c>
    1912:	2b d0       	rcall	.+86     	; 0x196a <__divsf3_pse+0x92>
    1914:	fe 2f       	mov	r31, r30
    1916:	29 d0       	rcall	.+82     	; 0x196a <__divsf3_pse+0x92>
    1918:	66 0f       	add	r22, r22
    191a:	77 1f       	adc	r23, r23
    191c:	88 1f       	adc	r24, r24
    191e:	bb 1f       	adc	r27, r27
    1920:	26 17       	cp	r18, r22
    1922:	37 07       	cpc	r19, r23
    1924:	48 07       	cpc	r20, r24
    1926:	ab 07       	cpc	r26, r27
    1928:	b0 e8       	ldi	r27, 0x80	; 128
    192a:	09 f0       	breq	.+2      	; 0x192e <__divsf3_pse+0x56>
    192c:	bb 0b       	sbc	r27, r27
    192e:	80 2d       	mov	r24, r0
    1930:	bf 01       	movw	r22, r30
    1932:	ff 27       	eor	r31, r31
    1934:	93 58       	subi	r25, 0x83	; 131
    1936:	5f 4f       	sbci	r21, 0xFF	; 255
    1938:	3a f0       	brmi	.+14     	; 0x1948 <__divsf3_pse+0x70>
    193a:	9e 3f       	cpi	r25, 0xFE	; 254
    193c:	51 05       	cpc	r21, r1
    193e:	78 f0       	brcs	.+30     	; 0x195e <__divsf3_pse+0x86>
    1940:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__fp_inf>
    1944:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_szero>
    1948:	5f 3f       	cpi	r21, 0xFF	; 255
    194a:	e4 f3       	brlt	.-8      	; 0x1944 <__divsf3_pse+0x6c>
    194c:	98 3e       	cpi	r25, 0xE8	; 232
    194e:	d4 f3       	brlt	.-12     	; 0x1944 <__divsf3_pse+0x6c>
    1950:	86 95       	lsr	r24
    1952:	77 95       	ror	r23
    1954:	67 95       	ror	r22
    1956:	b7 95       	ror	r27
    1958:	f7 95       	ror	r31
    195a:	9f 5f       	subi	r25, 0xFF	; 255
    195c:	c9 f7       	brne	.-14     	; 0x1950 <__divsf3_pse+0x78>
    195e:	88 0f       	add	r24, r24
    1960:	91 1d       	adc	r25, r1
    1962:	96 95       	lsr	r25
    1964:	87 95       	ror	r24
    1966:	97 f9       	bld	r25, 7
    1968:	08 95       	ret
    196a:	e1 e0       	ldi	r30, 0x01	; 1
    196c:	66 0f       	add	r22, r22
    196e:	77 1f       	adc	r23, r23
    1970:	88 1f       	adc	r24, r24
    1972:	bb 1f       	adc	r27, r27
    1974:	62 17       	cp	r22, r18
    1976:	73 07       	cpc	r23, r19
    1978:	84 07       	cpc	r24, r20
    197a:	ba 07       	cpc	r27, r26
    197c:	20 f0       	brcs	.+8      	; 0x1986 <__divsf3_pse+0xae>
    197e:	62 1b       	sub	r22, r18
    1980:	73 0b       	sbc	r23, r19
    1982:	84 0b       	sbc	r24, r20
    1984:	ba 0b       	sbc	r27, r26
    1986:	ee 1f       	adc	r30, r30
    1988:	88 f7       	brcc	.-30     	; 0x196c <__divsf3_pse+0x94>
    198a:	e0 95       	com	r30
    198c:	08 95       	ret

0000198e <__fixunssfsi>:
    198e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__fp_splitA>
    1992:	88 f0       	brcs	.+34     	; 0x19b6 <__fixunssfsi+0x28>
    1994:	9f 57       	subi	r25, 0x7F	; 127
    1996:	98 f0       	brcs	.+38     	; 0x19be <__fixunssfsi+0x30>
    1998:	b9 2f       	mov	r27, r25
    199a:	99 27       	eor	r25, r25
    199c:	b7 51       	subi	r27, 0x17	; 23
    199e:	b0 f0       	brcs	.+44     	; 0x19cc <__fixunssfsi+0x3e>
    19a0:	e1 f0       	breq	.+56     	; 0x19da <__fixunssfsi+0x4c>
    19a2:	66 0f       	add	r22, r22
    19a4:	77 1f       	adc	r23, r23
    19a6:	88 1f       	adc	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	1a f0       	brmi	.+6      	; 0x19b2 <__fixunssfsi+0x24>
    19ac:	ba 95       	dec	r27
    19ae:	c9 f7       	brne	.-14     	; 0x19a2 <__fixunssfsi+0x14>
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <__fixunssfsi+0x4c>
    19b2:	b1 30       	cpi	r27, 0x01	; 1
    19b4:	91 f0       	breq	.+36     	; 0x19da <__fixunssfsi+0x4c>
    19b6:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__fp_zero>
    19ba:	b1 e0       	ldi	r27, 0x01	; 1
    19bc:	08 95       	ret
    19be:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__fp_zero>
    19c2:	67 2f       	mov	r22, r23
    19c4:	78 2f       	mov	r23, r24
    19c6:	88 27       	eor	r24, r24
    19c8:	b8 5f       	subi	r27, 0xF8	; 248
    19ca:	39 f0       	breq	.+14     	; 0x19da <__fixunssfsi+0x4c>
    19cc:	b9 3f       	cpi	r27, 0xF9	; 249
    19ce:	cc f3       	brlt	.-14     	; 0x19c2 <__fixunssfsi+0x34>
    19d0:	86 95       	lsr	r24
    19d2:	77 95       	ror	r23
    19d4:	67 95       	ror	r22
    19d6:	b3 95       	inc	r27
    19d8:	d9 f7       	brne	.-10     	; 0x19d0 <__fixunssfsi+0x42>
    19da:	3e f4       	brtc	.+14     	; 0x19ea <__fixunssfsi+0x5c>
    19dc:	90 95       	com	r25
    19de:	80 95       	com	r24
    19e0:	70 95       	com	r23
    19e2:	61 95       	neg	r22
    19e4:	7f 4f       	sbci	r23, 0xFF	; 255
    19e6:	8f 4f       	sbci	r24, 0xFF	; 255
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	08 95       	ret

000019ec <__floatunsisf>:
    19ec:	e8 94       	clt
    19ee:	09 c0       	rjmp	.+18     	; 0x1a02 <__floatsisf+0x12>

000019f0 <__floatsisf>:
    19f0:	97 fb       	bst	r25, 7
    19f2:	3e f4       	brtc	.+14     	; 0x1a02 <__floatsisf+0x12>
    19f4:	90 95       	com	r25
    19f6:	80 95       	com	r24
    19f8:	70 95       	com	r23
    19fa:	61 95       	neg	r22
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1a00:	9f 4f       	sbci	r25, 0xFF	; 255
    1a02:	99 23       	and	r25, r25
    1a04:	a9 f0       	breq	.+42     	; 0x1a30 <__floatsisf+0x40>
    1a06:	f9 2f       	mov	r31, r25
    1a08:	96 e9       	ldi	r25, 0x96	; 150
    1a0a:	bb 27       	eor	r27, r27
    1a0c:	93 95       	inc	r25
    1a0e:	f6 95       	lsr	r31
    1a10:	87 95       	ror	r24
    1a12:	77 95       	ror	r23
    1a14:	67 95       	ror	r22
    1a16:	b7 95       	ror	r27
    1a18:	f1 11       	cpse	r31, r1
    1a1a:	f8 cf       	rjmp	.-16     	; 0x1a0c <__floatsisf+0x1c>
    1a1c:	fa f4       	brpl	.+62     	; 0x1a5c <__floatsisf+0x6c>
    1a1e:	bb 0f       	add	r27, r27
    1a20:	11 f4       	brne	.+4      	; 0x1a26 <__floatsisf+0x36>
    1a22:	60 ff       	sbrs	r22, 0
    1a24:	1b c0       	rjmp	.+54     	; 0x1a5c <__floatsisf+0x6c>
    1a26:	6f 5f       	subi	r22, 0xFF	; 255
    1a28:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	16 c0       	rjmp	.+44     	; 0x1a5c <__floatsisf+0x6c>
    1a30:	88 23       	and	r24, r24
    1a32:	11 f0       	breq	.+4      	; 0x1a38 <__floatsisf+0x48>
    1a34:	96 e9       	ldi	r25, 0x96	; 150
    1a36:	11 c0       	rjmp	.+34     	; 0x1a5a <__floatsisf+0x6a>
    1a38:	77 23       	and	r23, r23
    1a3a:	21 f0       	breq	.+8      	; 0x1a44 <__floatsisf+0x54>
    1a3c:	9e e8       	ldi	r25, 0x8E	; 142
    1a3e:	87 2f       	mov	r24, r23
    1a40:	76 2f       	mov	r23, r22
    1a42:	05 c0       	rjmp	.+10     	; 0x1a4e <__floatsisf+0x5e>
    1a44:	66 23       	and	r22, r22
    1a46:	71 f0       	breq	.+28     	; 0x1a64 <__floatsisf+0x74>
    1a48:	96 e8       	ldi	r25, 0x86	; 134
    1a4a:	86 2f       	mov	r24, r22
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	2a f0       	brmi	.+10     	; 0x1a5c <__floatsisf+0x6c>
    1a52:	9a 95       	dec	r25
    1a54:	66 0f       	add	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	88 1f       	adc	r24, r24
    1a5a:	da f7       	brpl	.-10     	; 0x1a52 <__floatsisf+0x62>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	96 95       	lsr	r25
    1a60:	87 95       	ror	r24
    1a62:	97 f9       	bld	r25, 7
    1a64:	08 95       	ret

00001a66 <__fp_cmp>:
    1a66:	99 0f       	add	r25, r25
    1a68:	00 08       	sbc	r0, r0
    1a6a:	55 0f       	add	r21, r21
    1a6c:	aa 0b       	sbc	r26, r26
    1a6e:	e0 e8       	ldi	r30, 0x80	; 128
    1a70:	fe ef       	ldi	r31, 0xFE	; 254
    1a72:	16 16       	cp	r1, r22
    1a74:	17 06       	cpc	r1, r23
    1a76:	e8 07       	cpc	r30, r24
    1a78:	f9 07       	cpc	r31, r25
    1a7a:	c0 f0       	brcs	.+48     	; 0x1aac <__fp_cmp+0x46>
    1a7c:	12 16       	cp	r1, r18
    1a7e:	13 06       	cpc	r1, r19
    1a80:	e4 07       	cpc	r30, r20
    1a82:	f5 07       	cpc	r31, r21
    1a84:	98 f0       	brcs	.+38     	; 0x1aac <__fp_cmp+0x46>
    1a86:	62 1b       	sub	r22, r18
    1a88:	73 0b       	sbc	r23, r19
    1a8a:	84 0b       	sbc	r24, r20
    1a8c:	95 0b       	sbc	r25, r21
    1a8e:	39 f4       	brne	.+14     	; 0x1a9e <__fp_cmp+0x38>
    1a90:	0a 26       	eor	r0, r26
    1a92:	61 f0       	breq	.+24     	; 0x1aac <__fp_cmp+0x46>
    1a94:	23 2b       	or	r18, r19
    1a96:	24 2b       	or	r18, r20
    1a98:	25 2b       	or	r18, r21
    1a9a:	21 f4       	brne	.+8      	; 0x1aa4 <__fp_cmp+0x3e>
    1a9c:	08 95       	ret
    1a9e:	0a 26       	eor	r0, r26
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <__fp_cmp+0x3e>
    1aa2:	a1 40       	sbci	r26, 0x01	; 1
    1aa4:	a6 95       	lsr	r26
    1aa6:	8f ef       	ldi	r24, 0xFF	; 255
    1aa8:	81 1d       	adc	r24, r1
    1aaa:	81 1d       	adc	r24, r1
    1aac:	08 95       	ret

00001aae <__fp_inf>:
    1aae:	97 f9       	bld	r25, 7
    1ab0:	9f 67       	ori	r25, 0x7F	; 127
    1ab2:	80 e8       	ldi	r24, 0x80	; 128
    1ab4:	70 e0       	ldi	r23, 0x00	; 0
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	08 95       	ret

00001aba <__fp_nan>:
    1aba:	9f ef       	ldi	r25, 0xFF	; 255
    1abc:	80 ec       	ldi	r24, 0xC0	; 192
    1abe:	08 95       	ret

00001ac0 <__fp_pscA>:
    1ac0:	00 24       	eor	r0, r0
    1ac2:	0a 94       	dec	r0
    1ac4:	16 16       	cp	r1, r22
    1ac6:	17 06       	cpc	r1, r23
    1ac8:	18 06       	cpc	r1, r24
    1aca:	09 06       	cpc	r0, r25
    1acc:	08 95       	ret

00001ace <__fp_pscB>:
    1ace:	00 24       	eor	r0, r0
    1ad0:	0a 94       	dec	r0
    1ad2:	12 16       	cp	r1, r18
    1ad4:	13 06       	cpc	r1, r19
    1ad6:	14 06       	cpc	r1, r20
    1ad8:	05 06       	cpc	r0, r21
    1ada:	08 95       	ret

00001adc <__fp_round>:
    1adc:	09 2e       	mov	r0, r25
    1ade:	03 94       	inc	r0
    1ae0:	00 0c       	add	r0, r0
    1ae2:	11 f4       	brne	.+4      	; 0x1ae8 <__fp_round+0xc>
    1ae4:	88 23       	and	r24, r24
    1ae6:	52 f0       	brmi	.+20     	; 0x1afc <__fp_round+0x20>
    1ae8:	bb 0f       	add	r27, r27
    1aea:	40 f4       	brcc	.+16     	; 0x1afc <__fp_round+0x20>
    1aec:	bf 2b       	or	r27, r31
    1aee:	11 f4       	brne	.+4      	; 0x1af4 <__fp_round+0x18>
    1af0:	60 ff       	sbrs	r22, 0
    1af2:	04 c0       	rjmp	.+8      	; 0x1afc <__fp_round+0x20>
    1af4:	6f 5f       	subi	r22, 0xFF	; 255
    1af6:	7f 4f       	sbci	r23, 0xFF	; 255
    1af8:	8f 4f       	sbci	r24, 0xFF	; 255
    1afa:	9f 4f       	sbci	r25, 0xFF	; 255
    1afc:	08 95       	ret

00001afe <__fp_split3>:
    1afe:	57 fd       	sbrc	r21, 7
    1b00:	90 58       	subi	r25, 0x80	; 128
    1b02:	44 0f       	add	r20, r20
    1b04:	55 1f       	adc	r21, r21
    1b06:	59 f0       	breq	.+22     	; 0x1b1e <__fp_splitA+0x10>
    1b08:	5f 3f       	cpi	r21, 0xFF	; 255
    1b0a:	71 f0       	breq	.+28     	; 0x1b28 <__fp_splitA+0x1a>
    1b0c:	47 95       	ror	r20

00001b0e <__fp_splitA>:
    1b0e:	88 0f       	add	r24, r24
    1b10:	97 fb       	bst	r25, 7
    1b12:	99 1f       	adc	r25, r25
    1b14:	61 f0       	breq	.+24     	; 0x1b2e <__fp_splitA+0x20>
    1b16:	9f 3f       	cpi	r25, 0xFF	; 255
    1b18:	79 f0       	breq	.+30     	; 0x1b38 <__fp_splitA+0x2a>
    1b1a:	87 95       	ror	r24
    1b1c:	08 95       	ret
    1b1e:	12 16       	cp	r1, r18
    1b20:	13 06       	cpc	r1, r19
    1b22:	14 06       	cpc	r1, r20
    1b24:	55 1f       	adc	r21, r21
    1b26:	f2 cf       	rjmp	.-28     	; 0x1b0c <__fp_split3+0xe>
    1b28:	46 95       	lsr	r20
    1b2a:	f1 df       	rcall	.-30     	; 0x1b0e <__fp_splitA>
    1b2c:	08 c0       	rjmp	.+16     	; 0x1b3e <__fp_splitA+0x30>
    1b2e:	16 16       	cp	r1, r22
    1b30:	17 06       	cpc	r1, r23
    1b32:	18 06       	cpc	r1, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	f1 cf       	rjmp	.-30     	; 0x1b1a <__fp_splitA+0xc>
    1b38:	86 95       	lsr	r24
    1b3a:	71 05       	cpc	r23, r1
    1b3c:	61 05       	cpc	r22, r1
    1b3e:	08 94       	sec
    1b40:	08 95       	ret

00001b42 <__fp_zero>:
    1b42:	e8 94       	clt

00001b44 <__fp_szero>:
    1b44:	bb 27       	eor	r27, r27
    1b46:	66 27       	eor	r22, r22
    1b48:	77 27       	eor	r23, r23
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	97 f9       	bld	r25, 7
    1b4e:	08 95       	ret

00001b50 <__mulsf3>:
    1b50:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3x>
    1b54:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_round>
    1b58:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__fp_pscA>
    1b5c:	38 f0       	brcs	.+14     	; 0x1b6c <__mulsf3+0x1c>
    1b5e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__fp_pscB>
    1b62:	20 f0       	brcs	.+8      	; 0x1b6c <__mulsf3+0x1c>
    1b64:	95 23       	and	r25, r21
    1b66:	11 f0       	breq	.+4      	; 0x1b6c <__mulsf3+0x1c>
    1b68:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__fp_inf>
    1b6c:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_nan>
    1b70:	11 24       	eor	r1, r1
    1b72:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_szero>

00001b76 <__mulsf3x>:
    1b76:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__fp_split3>
    1b7a:	70 f3       	brcs	.-36     	; 0x1b58 <__mulsf3+0x8>

00001b7c <__mulsf3_pse>:
    1b7c:	95 9f       	mul	r25, r21
    1b7e:	c1 f3       	breq	.-16     	; 0x1b70 <__mulsf3+0x20>
    1b80:	95 0f       	add	r25, r21
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	55 1f       	adc	r21, r21
    1b86:	62 9f       	mul	r22, r18
    1b88:	f0 01       	movw	r30, r0
    1b8a:	72 9f       	mul	r23, r18
    1b8c:	bb 27       	eor	r27, r27
    1b8e:	f0 0d       	add	r31, r0
    1b90:	b1 1d       	adc	r27, r1
    1b92:	63 9f       	mul	r22, r19
    1b94:	aa 27       	eor	r26, r26
    1b96:	f0 0d       	add	r31, r0
    1b98:	b1 1d       	adc	r27, r1
    1b9a:	aa 1f       	adc	r26, r26
    1b9c:	64 9f       	mul	r22, r20
    1b9e:	66 27       	eor	r22, r22
    1ba0:	b0 0d       	add	r27, r0
    1ba2:	a1 1d       	adc	r26, r1
    1ba4:	66 1f       	adc	r22, r22
    1ba6:	82 9f       	mul	r24, r18
    1ba8:	22 27       	eor	r18, r18
    1baa:	b0 0d       	add	r27, r0
    1bac:	a1 1d       	adc	r26, r1
    1bae:	62 1f       	adc	r22, r18
    1bb0:	73 9f       	mul	r23, r19
    1bb2:	b0 0d       	add	r27, r0
    1bb4:	a1 1d       	adc	r26, r1
    1bb6:	62 1f       	adc	r22, r18
    1bb8:	83 9f       	mul	r24, r19
    1bba:	a0 0d       	add	r26, r0
    1bbc:	61 1d       	adc	r22, r1
    1bbe:	22 1f       	adc	r18, r18
    1bc0:	74 9f       	mul	r23, r20
    1bc2:	33 27       	eor	r19, r19
    1bc4:	a0 0d       	add	r26, r0
    1bc6:	61 1d       	adc	r22, r1
    1bc8:	23 1f       	adc	r18, r19
    1bca:	84 9f       	mul	r24, r20
    1bcc:	60 0d       	add	r22, r0
    1bce:	21 1d       	adc	r18, r1
    1bd0:	82 2f       	mov	r24, r18
    1bd2:	76 2f       	mov	r23, r22
    1bd4:	6a 2f       	mov	r22, r26
    1bd6:	11 24       	eor	r1, r1
    1bd8:	9f 57       	subi	r25, 0x7F	; 127
    1bda:	50 40       	sbci	r21, 0x00	; 0
    1bdc:	9a f0       	brmi	.+38     	; 0x1c04 <__mulsf3_pse+0x88>
    1bde:	f1 f0       	breq	.+60     	; 0x1c1c <__mulsf3_pse+0xa0>
    1be0:	88 23       	and	r24, r24
    1be2:	4a f0       	brmi	.+18     	; 0x1bf6 <__mulsf3_pse+0x7a>
    1be4:	ee 0f       	add	r30, r30
    1be6:	ff 1f       	adc	r31, r31
    1be8:	bb 1f       	adc	r27, r27
    1bea:	66 1f       	adc	r22, r22
    1bec:	77 1f       	adc	r23, r23
    1bee:	88 1f       	adc	r24, r24
    1bf0:	91 50       	subi	r25, 0x01	; 1
    1bf2:	50 40       	sbci	r21, 0x00	; 0
    1bf4:	a9 f7       	brne	.-22     	; 0x1be0 <__mulsf3_pse+0x64>
    1bf6:	9e 3f       	cpi	r25, 0xFE	; 254
    1bf8:	51 05       	cpc	r21, r1
    1bfa:	80 f0       	brcs	.+32     	; 0x1c1c <__mulsf3_pse+0xa0>
    1bfc:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__fp_inf>
    1c00:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_szero>
    1c04:	5f 3f       	cpi	r21, 0xFF	; 255
    1c06:	e4 f3       	brlt	.-8      	; 0x1c00 <__mulsf3_pse+0x84>
    1c08:	98 3e       	cpi	r25, 0xE8	; 232
    1c0a:	d4 f3       	brlt	.-12     	; 0x1c00 <__mulsf3_pse+0x84>
    1c0c:	86 95       	lsr	r24
    1c0e:	77 95       	ror	r23
    1c10:	67 95       	ror	r22
    1c12:	b7 95       	ror	r27
    1c14:	f7 95       	ror	r31
    1c16:	e7 95       	ror	r30
    1c18:	9f 5f       	subi	r25, 0xFF	; 255
    1c1a:	c1 f7       	brne	.-16     	; 0x1c0c <__mulsf3_pse+0x90>
    1c1c:	fe 2b       	or	r31, r30
    1c1e:	88 0f       	add	r24, r24
    1c20:	91 1d       	adc	r25, r1
    1c22:	96 95       	lsr	r25
    1c24:	87 95       	ror	r24
    1c26:	97 f9       	bld	r25, 7
    1c28:	08 95       	ret

00001c2a <atoi>:
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	88 27       	eor	r24, r24
    1c2e:	99 27       	eor	r25, r25
    1c30:	e8 94       	clt
    1c32:	21 91       	ld	r18, Z+
    1c34:	20 32       	cpi	r18, 0x20	; 32
    1c36:	e9 f3       	breq	.-6      	; 0x1c32 <atoi+0x8>
    1c38:	29 30       	cpi	r18, 0x09	; 9
    1c3a:	10 f0       	brcs	.+4      	; 0x1c40 <atoi+0x16>
    1c3c:	2e 30       	cpi	r18, 0x0E	; 14
    1c3e:	c8 f3       	brcs	.-14     	; 0x1c32 <atoi+0x8>
    1c40:	2b 32       	cpi	r18, 0x2B	; 43
    1c42:	41 f0       	breq	.+16     	; 0x1c54 <atoi+0x2a>
    1c44:	2d 32       	cpi	r18, 0x2D	; 45
    1c46:	39 f4       	brne	.+14     	; 0x1c56 <atoi+0x2c>
    1c48:	68 94       	set
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <atoi+0x2a>
    1c4c:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__mulhi_const_10>
    1c50:	82 0f       	add	r24, r18
    1c52:	91 1d       	adc	r25, r1
    1c54:	21 91       	ld	r18, Z+
    1c56:	20 53       	subi	r18, 0x30	; 48
    1c58:	2a 30       	cpi	r18, 0x0A	; 10
    1c5a:	c0 f3       	brcs	.-16     	; 0x1c4c <atoi+0x22>
    1c5c:	1e f4       	brtc	.+6      	; 0x1c64 <atoi+0x3a>
    1c5e:	90 95       	com	r25
    1c60:	81 95       	neg	r24
    1c62:	9f 4f       	sbci	r25, 0xFF	; 255
    1c64:	08 95       	ret

00001c66 <__mulhi_const_10>:
    1c66:	7a e0       	ldi	r23, 0x0A	; 10
    1c68:	97 9f       	mul	r25, r23
    1c6a:	90 2d       	mov	r25, r0
    1c6c:	87 9f       	mul	r24, r23
    1c6e:	80 2d       	mov	r24, r0
    1c70:	91 0d       	add	r25, r1
    1c72:	11 24       	eor	r1, r1
    1c74:	08 95       	ret

00001c76 <eeprom_read_block>:
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22

00001c7a <eeprom_read_blraw>:
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	f9 99       	sbic	0x1f, 1	; 31
    1c7e:	fe cf       	rjmp	.-4      	; 0x1c7c <eeprom_read_blraw+0x2>
    1c80:	06 c0       	rjmp	.+12     	; 0x1c8e <eeprom_read_blraw+0x14>
    1c82:	f2 bd       	out	0x22, r31	; 34
    1c84:	e1 bd       	out	0x21, r30	; 33
    1c86:	f8 9a       	sbi	0x1f, 0	; 31
    1c88:	31 96       	adiw	r30, 0x01	; 1
    1c8a:	00 b4       	in	r0, 0x20	; 32
    1c8c:	0d 92       	st	X+, r0
    1c8e:	41 50       	subi	r20, 0x01	; 1
    1c90:	50 40       	sbci	r21, 0x00	; 0
    1c92:	b8 f7       	brcc	.-18     	; 0x1c82 <eeprom_read_blraw+0x8>
    1c94:	08 95       	ret

00001c96 <_exit>:
    1c96:	f8 94       	cli

00001c98 <__stop_program>:
    1c98:	ff cf       	rjmp	.-2      	; 0x1c98 <__stop_program>
